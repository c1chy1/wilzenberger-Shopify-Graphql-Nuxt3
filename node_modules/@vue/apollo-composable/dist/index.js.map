{
  "version": 3,
  "sources": ["../src/index.ts", "../src/useQuery.ts", "../src/useApolloClient.ts", "../src/util/paramToRef.ts", "../src/util/paramToReactive.ts", "../src/util/useEventHook.ts", "../src/util/loadingTracking.ts", "../src/util/toApolloError.ts", "../src/util/env.ts", "../src/useLazyQuery.ts", "../src/useMutation.ts", "../src/useSubscription.ts", "../src/useResult.ts", "../src/useLoading.ts"],
  "sourcesContent": ["export {\n  useQuery,\n  UseQueryOptions,\n  UseQueryReturn,\n} from './useQuery'\n\nexport {\n  useLazyQuery,\n} from './useLazyQuery'\n\nexport {\n  useMutation,\n  UseMutationOptions,\n  UseMutationReturn,\n  MutateFunction,\n  MutateOverrideOptions,\n  MutateResult,\n} from './useMutation'\n\nexport {\n  useSubscription,\n  UseSubscriptionOptions,\n  UseSubscriptionReturn,\n} from './useSubscription'\n\nexport {\n  useResult,\n  UseResultReturn,\n} from './useResult'\n\nexport {\n  useQueryLoading,\n  useGlobalQueryLoading,\n  useMutationLoading,\n  useGlobalMutationLoading,\n  useSubscriptionLoading,\n  useGlobalSubscriptionLoading,\n} from './useLoading'\n\nexport {\n  DefaultApolloClient,\n  ApolloClients,\n  useApolloClient,\n  UseApolloClientReturn,\n  provideApolloClient,\n  provideApolloClients,\n} from './useApolloClient'\n", "import {\n  ref,\n  Ref,\n  unref,\n  computed,\n  watch,\n  onServerPrefetch,\n  getCurrentInstance,\n  onBeforeUnmount,\n  nextTick,\n} from 'vue-demi'\nimport { DocumentNode } from 'graphql'\nimport {\n  OperationVariables,\n  WatchQueryOptions,\n  ObservableQuery,\n  ApolloQueryResult,\n  SubscribeToMoreOptions,\n  FetchMoreQueryOptions,\n  FetchMoreOptions,\n  ObservableSubscription,\n  TypedDocumentNode,\n  ApolloError,\n} from '@apollo/client/core'\nimport { throttle, debounce } from 'throttle-debounce'\nimport { useApolloClient } from './useApolloClient'\nimport { ReactiveFunction } from './util/ReactiveFunction'\nimport { paramToRef } from './util/paramToRef'\nimport { paramToReactive } from './util/paramToReactive'\nimport { useEventHook } from './util/useEventHook'\nimport { trackQuery } from './util/loadingTracking'\nimport { resultErrorsToApolloError, toApolloError } from './util/toApolloError'\nimport { isServer } from './util/env'\n\nimport type { CurrentInstance } from './util/types'\n\nexport interface UseQueryOptions<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  TResult = any,\n  TVariables = OperationVariables\n> extends Omit<WatchQueryOptions<TVariables>, 'query' | 'variables'> {\n  clientId?: string\n  enabled?: boolean\n  throttle?: number\n  debounce?: number\n  prefetch?: boolean\n}\n\ninterface SubscribeToMoreItem {\n  options: any\n  unsubscribeFns: (() => void)[]\n}\n\n// Parameters\nexport type DocumentParameter<TResult, TVariables = undefined> = DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode> | TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>\nexport type VariablesParameter<TVariables> = TVariables | Ref<TVariables> | ReactiveFunction<TVariables>\nexport type OptionsParameter<TResult, TVariables> = UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>> | ReactiveFunction<UseQueryOptions<TResult, TVariables>>\n\n// Return\nexport interface UseQueryReturn<TResult, TVariables> {\n  result: Ref<TResult | undefined>\n  loading: Ref<boolean>\n  networkStatus: Ref<number | undefined>\n  error: Ref<ApolloError | null>\n  start: () => void\n  stop: () => void\n  restart: () => void\n  forceDisabled: Ref<boolean>\n  document: Ref<DocumentNode>\n  variables: Ref<TVariables | undefined>\n  options: UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>>\n  query: Ref<ObservableQuery<TResult, TVariables> | null | undefined>\n  refetch: (variables?: TVariables) => Promise<ApolloQueryResult<TResult>> | undefined\n  fetchMore: (options: FetchMoreQueryOptions<TVariables, TResult> & FetchMoreOptions<TResult, TVariables>) => Promise<ApolloQueryResult<TResult>> | undefined\n  subscribeToMore: <TSubscriptionVariables = OperationVariables, TSubscriptionData = TResult>(options: SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData> | Ref<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>> | ReactiveFunction<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>>) => void\n  onResult: (fn: (param: ApolloQueryResult<TResult>) => void) => {\n    off: () => void\n  }\n  onError: (fn: (param: ApolloError) => void) => {\n    off: () => void\n  }\n}\n\n/**\n * Use a query that does not require variables or options.\n * */\nexport function useQuery<TResult = any> (\n  document: DocumentParameter<TResult, undefined>\n): UseQueryReturn<TResult, undefined>\n\n/**\n * Use a query that has optional variables but not options\n */\nexport function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>\n): UseQueryReturn<TResult, TVariables>\n\n/**\n * Use a query that has required variables but not options\n */\nexport function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>\n): UseQueryReturn<TResult, TVariables>\n\n/**\n * Use a query that requires options but not variables.\n */\nexport function useQuery<TResult = any> (\n  document: DocumentParameter<TResult, undefined>,\n  variables: undefined | null,\n  options: OptionsParameter<TResult, null>,\n): UseQueryReturn<TResult, null>\n\n/**\n * Use a query that requires variables and options.\n */\nexport function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>,\n  options: OptionsParameter<TResult, TVariables>,\n): UseQueryReturn<TResult, TVariables>\n\nexport function useQuery<\n  TResult,\n  TVariables extends OperationVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables?: VariablesParameter<TVariables>,\n  options?: OptionsParameter<TResult, TVariables>,\n): UseQueryReturn<TResult, TVariables> {\n  return useQueryImpl<TResult, TVariables>(document, variables, options)\n}\n\nexport function useQueryImpl<\n  TResult,\n  TVariables extends OperationVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables?: VariablesParameter<TVariables>,\n  options: OptionsParameter<TResult, TVariables> = {},\n  lazy = false,\n): UseQueryReturn<TResult, TVariables> {\n  // Is on server?\n  const vm = getCurrentInstance() as CurrentInstance | null\n\n  const currentOptions = ref<UseQueryOptions<TResult, TVariables>>()\n\n  const documentRef = paramToRef(document)\n  const variablesRef = paramToRef(variables)\n  const optionsRef = paramToReactive(options)\n\n  // Result\n  /**\n   * Result from the query\n   */\n  const result = ref<TResult | undefined>()\n  const resultEvent = useEventHook<ApolloQueryResult<TResult>>()\n  const error = ref<ApolloError | null>(null)\n  const errorEvent = useEventHook<ApolloError>()\n\n  // Loading\n\n  /**\n   * Indicates if a network request is pending\n   */\n  const loading = ref(false)\n  vm && trackQuery(loading)\n  const networkStatus = ref<number>()\n\n  // SSR\n  let firstResolve: (() => void) | undefined\n  let firstReject: ((apolloError: ApolloError) => void) | undefined\n  vm && onServerPrefetch?.(() => {\n    if (!isEnabled.value || (isServer && currentOptions.value?.prefetch === false)) return\n\n    return new Promise<void>((resolve, reject) => {\n      firstResolve = () => {\n        resolve()\n        firstResolve = undefined\n        firstReject = undefined\n      }\n      firstReject = (apolloError: ApolloError) => {\n        reject(apolloError)\n        firstResolve = undefined\n        firstReject = undefined\n      }\n    }).then(stop).catch(stop)\n  })\n\n  // Apollo Client\n  const { resolveClient } = useApolloClient()\n\n  // Query\n\n  const query: Ref<ObservableQuery<TResult, TVariables> | null | undefined> = ref()\n  let observer: ObservableSubscription | undefined\n  let started = false\n\n  /**\n   * Starts watching the query\n   */\n  function start () {\n    if (\n      started || !isEnabled.value ||\n      (isServer && currentOptions.value?.prefetch === false)\n    ) {\n      if (firstResolve) firstResolve()\n      return\n    }\n\n    started = true\n    error.value = null\n    loading.value = true\n\n    const client = resolveClient(currentOptions.value?.clientId)\n\n    query.value = client.watchQuery<TResult, TVariables>({\n      query: currentDocument,\n      variables: currentVariables,\n      ...currentOptions.value,\n      ...(isServer && currentOptions.value?.fetchPolicy !== 'no-cache')\n        ? {\n          fetchPolicy: 'network-only',\n        }\n        : {},\n    })\n\n    startQuerySubscription()\n\n    if (!isServer && (currentOptions.value?.fetchPolicy !== 'no-cache' || currentOptions.value.notifyOnNetworkStatusChange)) {\n      const currentResult = query.value.getCurrentResult()\n\n      if (!currentResult.loading || currentResult.partial || currentOptions.value?.notifyOnNetworkStatusChange) {\n        onNextResult(currentResult)\n      }\n    }\n\n    if (!isServer) {\n      for (const item of subscribeToMoreItems) {\n        addSubscribeToMore(item)\n      }\n    }\n  }\n\n  function startQuerySubscription () {\n    if (observer && !observer.closed) return\n    if (!query.value) return\n\n    // Create subscription\n    observer = query.value.subscribe({\n      next: onNextResult,\n      error: onError,\n    })\n  }\n\n  function onNextResult (queryResult: ApolloQueryResult<TResult>) {\n    // Remove any previous error that may still be present from the last fetch (so result handlers\n    // don't receive old errors that may not even be applicable anymore).\n    error.value = null\n\n    processNextResult(queryResult)\n\n    // When `errorPolicy` is `all`, `onError` will not get called and\n    // ApolloQueryResult.errors may be set at the same time as we get a result\n    if (!queryResult.error && queryResult.errors?.length) {\n      processError(resultErrorsToApolloError(queryResult.errors))\n    }\n\n    if (firstResolve) {\n      firstResolve()\n      stop()\n    }\n  }\n\n  function processNextResult (queryResult: ApolloQueryResult<TResult>) {\n    result.value = queryResult.data && Object.keys(queryResult.data).length === 0 ? undefined : queryResult.data\n    loading.value = queryResult.loading\n    networkStatus.value = queryResult.networkStatus\n    resultEvent.trigger(queryResult)\n  }\n\n  function onError (queryError: unknown) {\n    // any error should already be an ApolloError, but we make sure\n    const apolloError = toApolloError(queryError)\n    const client = resolveClient(currentOptions.value?.clientId)\n    const errorPolicy = currentOptions.value?.errorPolicy || client.defaultOptions?.watchQuery?.errorPolicy\n\n    if (errorPolicy && errorPolicy !== 'none') {\n      processNextResult((query.value as ObservableQuery<TResult, TVariables>).getCurrentResult())\n    }\n    processError(apolloError)\n    if (firstReject) {\n      firstReject(apolloError)\n      stop()\n    }\n    // The observable closes the sub if an error occurs\n    resubscribeToQuery()\n  }\n\n  function processError (apolloError: ApolloError) {\n    error.value = apolloError\n    loading.value = false\n    networkStatus.value = 8\n    errorEvent.trigger(apolloError)\n  }\n\n  function resubscribeToQuery () {\n    if (!query.value) return\n    const lastError = query.value.getLastError()\n    const lastResult = query.value.getLastResult()\n    query.value.resetLastResults()\n    startQuerySubscription()\n    Object.assign(query.value, { lastError, lastResult })\n  }\n\n  let onStopHandlers: Array<() => void> = []\n\n  /**\n   * Stop watching the query\n   */\n  function stop () {\n    if (firstResolve) firstResolve()\n    if (!started) return\n    started = false\n    loading.value = false\n\n    onStopHandlers.forEach(handler => handler())\n    onStopHandlers = []\n\n    if (query.value) {\n      query.value.stopPolling()\n      query.value = null\n    }\n\n    if (observer) {\n      observer.unsubscribe()\n      observer = undefined\n    }\n  }\n\n  // Restart\n  let restarting = false\n  /**\n   * Queue a restart of the query (on next tick) if it is already active\n   */\n  function baseRestart () {\n    if (!started || restarting) return\n    restarting = true\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    nextTick(() => {\n      if (started) {\n        stop()\n        start()\n      }\n      restarting = false\n    })\n  }\n\n  let debouncedRestart: typeof baseRestart\n  let isRestartDebounceSetup = false\n  function updateRestartFn () {\n    // On server, will be called before currentOptions is initialized\n    // @TODO investigate\n    if (!currentOptions.value) {\n      debouncedRestart = baseRestart\n    } else {\n      if (currentOptions.value?.throttle) {\n        debouncedRestart = throttle(currentOptions.value.throttle, baseRestart)\n      } else if (currentOptions.value?.debounce) {\n        debouncedRestart = debounce(currentOptions.value.debounce, baseRestart)\n      } else {\n        debouncedRestart = baseRestart\n      }\n      isRestartDebounceSetup = true\n    }\n  }\n\n  function restart () {\n    if (!isRestartDebounceSetup) updateRestartFn()\n    debouncedRestart()\n  }\n\n  // Applying document\n  let currentDocument: DocumentNode\n  watch(documentRef, value => {\n    currentDocument = value\n    restart()\n  }, {\n    immediate: true,\n  })\n\n  // Applying variables\n  let currentVariables: TVariables | undefined\n  let currentVariablesSerialized: string\n  watch(variablesRef, (value, oldValue) => {\n    const serialized = JSON.stringify(value)\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value\n      restart()\n    }\n    currentVariablesSerialized = serialized\n  }, {\n    deep: true,\n    immediate: true,\n  })\n\n  // Applying options\n  watch(() => unref(optionsRef), value => {\n    if (currentOptions.value && (\n      currentOptions.value.throttle !== value.throttle ||\n      currentOptions.value.debounce !== value.debounce\n    )) {\n      updateRestartFn()\n    }\n    currentOptions.value = value\n    restart()\n  }, {\n    deep: true,\n    immediate: true,\n  })\n\n  // Refetch\n\n  function refetch (variables: TVariables | undefined = undefined) {\n    if (query.value) {\n      if (variables) {\n        currentVariables = variables\n      }\n      error.value = null\n      loading.value = true\n      return query.value.refetch(variables)\n        .then((refetchResult) => {\n          const currentResult = query.value?.getCurrentResult()\n          currentResult && processNextResult(currentResult)\n          return refetchResult\n        })\n    }\n  }\n\n  // Fetch more\n\n  function fetchMore (options: FetchMoreQueryOptions<TVariables, TResult> & FetchMoreOptions<TResult, TVariables>) {\n    if (query.value) {\n      error.value = null\n      loading.value = true\n      return query.value.fetchMore(options)\n        .then((fetchMoreResult) => {\n          const currentResult = query.value?.getCurrentResult()\n          currentResult && processNextResult(currentResult)\n          return fetchMoreResult\n        })\n    }\n  }\n\n  // Subscribe to more\n\n  const subscribeToMoreItems: SubscribeToMoreItem[] = []\n\n  function subscribeToMore<\n    TSubscriptionVariables = OperationVariables,\n    TSubscriptionData = TResult\n  > (\n    options: SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData> |\n    Ref<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>> |\n    ReactiveFunction<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>>,\n  ) {\n    if (isServer) return\n    const optionsRef = paramToRef(options)\n    watch(optionsRef, (value, oldValue, onCleanup) => {\n      const index = subscribeToMoreItems.findIndex(item => item.options === oldValue)\n      if (index !== -1) {\n        subscribeToMoreItems.splice(index, 1)\n      }\n      const item: SubscribeToMoreItem = {\n        options: value,\n        unsubscribeFns: [],\n      }\n      subscribeToMoreItems.push(item)\n\n      addSubscribeToMore(item)\n\n      onCleanup(() => {\n        item.unsubscribeFns.forEach(fn => fn())\n        item.unsubscribeFns = []\n      })\n    }, {\n      immediate: true,\n    })\n  }\n\n  function addSubscribeToMore (item: SubscribeToMoreItem) {\n    if (!started) return\n    if (!query.value) {\n      throw new Error('Query is not defined')\n    }\n    const unsubscribe = query.value.subscribeToMore(item.options)\n    onStopHandlers.push(unsubscribe)\n    item.unsubscribeFns.push(unsubscribe)\n  }\n\n  // Enabled state\n\n  const forceDisabled = ref(lazy)\n  const enabledOption = computed(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled)\n  const isEnabled = computed(() => enabledOption.value && !forceDisabled.value)\n\n  // Auto start & stop\n  watch(isEnabled, value => {\n    if (value) {\n      start()\n    } else {\n      stop()\n    }\n  }, {\n    immediate: true,\n  })\n\n  // Teardown\n  vm && onBeforeUnmount(() => {\n    stop()\n    subscribeToMoreItems.length = 0\n  })\n\n  return {\n    result,\n    loading,\n    networkStatus,\n    error,\n    start,\n    stop,\n    restart,\n    forceDisabled,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    query,\n    refetch,\n    fetchMore,\n    subscribeToMore,\n    onResult: resultEvent.on,\n    onError: errorEvent.on,\n  }\n}\n", "import { getCurrentInstance, inject } from 'vue-demi'\nimport { ApolloClient } from '@apollo/client/core'\n\nexport const DefaultApolloClient = Symbol('default-apollo-client')\nexport const ApolloClients = Symbol('apollo-clients')\n\ntype ClientId = string\ntype ClientDict<T> = Record<ClientId, ApolloClient<T>>\n\ntype ResolveClient<TCacheShape, TReturn = ApolloClient<TCacheShape>> = (clientId?: ClientId) => TReturn\ntype NullableApolloClient<TCacheShape> = ApolloClient<TCacheShape> | undefined\n\nexport interface UseApolloClientReturn<TCacheShape> {\n  resolveClient: ResolveClient<TCacheShape>\n  readonly client: ApolloClient<TCacheShape>\n}\n\nfunction resolveDefaultClient<T> (providedApolloClients: ClientDict<T> | null, providedApolloClient: ApolloClient<T> | null): NullableApolloClient<T> {\n  const resolvedClient = providedApolloClients\n    ? providedApolloClients.default\n    : (providedApolloClient ?? undefined)\n  return resolvedClient\n}\n\nfunction resolveClientWithId<T> (providedApolloClients: ClientDict<T> | null, clientId: ClientId): NullableApolloClient<T> {\n  if (!providedApolloClients) {\n    throw new Error(`No apolloClients injection found, tried to resolve '${clientId}' clientId`)\n  }\n  return providedApolloClients[clientId]\n}\n\nexport function useApolloClient<TCacheShape = any> (clientId?: ClientId): UseApolloClientReturn<TCacheShape> {\n  let resolveImpl: ResolveClient<TCacheShape, NullableApolloClient<TCacheShape>>\n\n  // Save current client in current closure scope\n  const savedCurrentClients = currentApolloClients\n\n  if (!getCurrentInstance()) {\n    resolveImpl = (id?: ClientId) => {\n      if (id) {\n        return resolveClientWithId(savedCurrentClients, id)\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default)\n    }\n  } else {\n    const providedApolloClients: ClientDict<TCacheShape> | null = inject(ApolloClients, null)\n    const providedApolloClient: ApolloClient<TCacheShape> | null = inject(DefaultApolloClient, null)\n\n    resolveImpl = (id?: ClientId) => {\n      if (id) {\n        const client = resolveClientWithId(providedApolloClients, id)\n        if (client) {\n          return client\n        }\n        return resolveClientWithId(savedCurrentClients, id)\n      }\n      const client = resolveDefaultClient(providedApolloClients, providedApolloClient)\n      if (client) {\n        return client\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default)\n    }\n  }\n\n  function resolveClient (id: ClientId | undefined = clientId) {\n    const client = resolveImpl(id)\n    if (!client) {\n      throw new Error(\n        `Apollo client with id ${\n          id ?? 'default'\n        } not found. Use provideApolloClient() if you are outside of a component setup.`,\n      )\n    }\n    return client\n  }\n\n  return {\n    resolveClient,\n    get client () {\n      return resolveClient()\n    },\n  }\n}\n\nlet currentApolloClients: ClientDict<any> = {}\n\nexport function provideApolloClient<TCacheShape = any> (client: ApolloClient<TCacheShape>) {\n  currentApolloClients = {\n    default: client,\n  }\n  return function <TFnResult = any> (fn: () => TFnResult) {\n    const result = fn()\n    currentApolloClients = {}\n    return result\n  }\n}\n\nexport function provideApolloClients<TCacheShape = any> (clients: ClientDict<TCacheShape>) {\n  currentApolloClients = clients\n  return function <TFnResult = any> (fn: () => TFnResult) {\n    const result = fn()\n    currentApolloClients = {}\n    return result\n  }\n}\n", "import { Ref, isRef, computed, ref } from 'vue-demi'\nimport { ReactiveFunction } from './ReactiveFunction'\n\nexport function paramToRef<T> (param: T | Ref<T> | ReactiveFunction<T>): Ref<T> {\n  if (isRef(param)) {\n    return param\n  } else if (typeof param === 'function') {\n    return computed(param as ReactiveFunction<T>)\n  } else {\n    return ref(param) as Ref<T>\n  }\n}\n", "import { Ref, isRef, reactive, computed } from 'vue-demi'\nimport { ReactiveFunction } from './ReactiveFunction'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TObject = object\n\nexport function paramToReactive<T extends TObject> (param: T | Ref<T> | ReactiveFunction<T>): T | Ref<T> {\n  if (isRef(param)) {\n    return param\n  } else if (typeof param === 'function') {\n    return computed(param as ReactiveFunction<T>)\n  } else if (param) {\n    return reactive(param) as T\n  } else {\n    return param\n  }\n}\n", "export function useEventHook<TParam = any> () {\n  const fns: Array<(param: TParam) => void> = []\n\n  function on (fn: (param: TParam) => void) {\n    fns.push(fn)\n    return {\n      off: () => off(fn),\n    }\n  }\n\n  function off (fn: (param: TParam) => void) {\n    const index = fns.indexOf(fn)\n    if (index !== -1) {\n      fns.splice(index, 1)\n    }\n  }\n\n  function trigger (param: TParam) {\n    for (const fn of fns) {\n      fn(param)\n    }\n  }\n\n  function getCount () {\n    return fns.length\n  }\n\n  return {\n    on,\n    off,\n    trigger,\n    getCount,\n  }\n}\n", "import { Ref, watch, onUnmounted, ref, getCurrentInstance, onBeforeUnmount } from 'vue-demi'\nimport type { CurrentInstance } from './types'\n\nexport interface LoadingTracking {\n  queries: Ref<number>\n  mutations: Ref<number>\n  subscriptions: Ref<number>\n}\n\nexport interface AppLoadingTracking extends LoadingTracking {\n  components: Map<any, LoadingTracking>\n}\n\nexport function getAppTracking () {\n  const vm = getCurrentInstance() as CurrentInstance | null\n  const root = vm?.$root ?? vm?.root ?? vm?.proxy?.$root as CurrentInstance | null | undefined\n  if (!root) {\n    throw new Error('Instance $root not found')\n  }\n\n  let appTracking: AppLoadingTracking\n\n  if (!root._apolloAppTracking) {\n    // Add per Vue tracking\n    appTracking = root._apolloAppTracking = {\n      queries: ref(0),\n      mutations: ref(0),\n      subscriptions: ref(0),\n      components: new Map(),\n    }\n  } else {\n    appTracking = root._apolloAppTracking\n  }\n\n  return {\n    appTracking,\n  }\n}\n\nexport function getCurrentTracking () {\n  const vm = getCurrentInstance()\n  if (!vm) {\n    throw new Error('getCurrentTracking must be used during a component setup')\n  }\n\n  const { appTracking } = getAppTracking()\n\n  let tracking: LoadingTracking\n\n  if (!appTracking.components.has(vm)) {\n    // Add per-component tracking\n    appTracking.components.set(vm, tracking = {\n      queries: ref(0),\n      mutations: ref(0),\n      subscriptions: ref(0),\n    })\n    // Cleanup\n    onUnmounted(() => {\n      appTracking.components.delete(vm)\n    })\n  } else {\n    tracking = appTracking.components.get(vm) as LoadingTracking\n  }\n\n  return {\n    appTracking,\n    tracking,\n  }\n}\n\nfunction track (loading: Ref<boolean>, type: keyof LoadingTracking) {\n  const { appTracking, tracking } = getCurrentTracking()\n\n  watch(loading, (value, oldValue) => {\n    if (oldValue != null && value !== oldValue) {\n      const mod = value ? 1 : -1\n      tracking[type].value += mod\n      appTracking[type].value += mod\n    }\n  }, {\n    immediate: true,\n  })\n\n  onBeforeUnmount(() => {\n    if (loading.value) {\n      tracking[type].value--\n      appTracking[type].value--\n    }\n  })\n}\n\nexport function trackQuery (loading: Ref<boolean>) {\n  track(loading, 'queries')\n}\n\nexport function trackMutation (loading: Ref<boolean>) {\n  track(loading, 'mutations')\n}\n\nexport function trackSubscription (loading: Ref<boolean>) {\n  track(loading, 'subscriptions')\n}\n", "import { ApolloError, isApolloError } from '@apollo/client/core'\nimport { GraphQLErrors } from '@apollo/client/errors'\n\nexport function toApolloError (error: unknown): ApolloError {\n  if (!(error instanceof Error)) {\n    return new ApolloError({\n      networkError: Object.assign(new Error(), { originalError: error }),\n      errorMessage: String(error),\n    })\n  }\n\n  if (isApolloError(error)) {\n    return error\n  }\n\n  return new ApolloError({ networkError: error, errorMessage: error.message })\n}\n\nexport function resultErrorsToApolloError (errors: GraphQLErrors): ApolloError {\n  return new ApolloError({\n    graphQLErrors: errors,\n    errorMessage: `GraphQL response contains errors: ${errors.map((e: any) => e.message).join(' | ')}`,\n  })\n}\n", "export const isServer = typeof window === 'undefined'\n", "import { DocumentNode } from 'graphql'\nimport { isRef } from 'vue-demi'\nimport { useQueryImpl, DocumentParameter, VariablesParameter, OptionsParameter, UseQueryOptions } from './useQuery'\n\nexport function useLazyQuery<\n  TResult = any,\n  TVariables = any,\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables?: VariablesParameter<TVariables>,\n  options?: OptionsParameter<TResult, TVariables>,\n) {\n  const query = useQueryImpl<TResult, TVariables>(document, variables, options, true)\n\n  function load (\n    document?: DocumentNode,\n    variables?: TVariables,\n    options?: UseQueryOptions,\n  ) {\n    if (document) {\n      query.document.value = document\n    }\n    if (variables) {\n      query.variables.value = variables\n    }\n    if (options) {\n      Object.assign(isRef(query.options) ? query.options.value : query.options, options)\n    }\n    query.forceDisabled.value = false\n  }\n\n  return {\n    ...query,\n    load,\n  }\n}\n", "import { DocumentNode } from 'graphql'\nimport { MutationOptions, OperationVariables, FetchResult, TypedDocumentNode, ApolloError } from '@apollo/client/core'\nimport { ref, onBeforeUnmount, isRef, Ref, getCurrentInstance } from 'vue-demi'\nimport { useApolloClient } from './useApolloClient'\nimport { ReactiveFunction } from './util/ReactiveFunction'\nimport { useEventHook } from './util/useEventHook'\nimport { trackMutation } from './util/loadingTracking'\nimport { toApolloError } from './util/toApolloError'\n\n/**\n * `useMutation` options for mutations that don't require `variables`.\n */\nexport interface UseMutationOptions<\n  TResult = any,\n  TVariables = OperationVariables\n> extends Omit<MutationOptions<TResult, TVariables>, 'mutation'> {\n  clientId?: string\n  throws?: 'auto' | 'always' | 'never'\n}\n\ntype DocumentParameter<TResult, TVariables> = DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode> | TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>\ntype OptionsParameter<TResult, TVariables> = UseMutationOptions<TResult, TVariables> | Ref<UseMutationOptions<TResult, TVariables>> | ReactiveFunction<UseMutationOptions<TResult, TVariables>>\n\nexport type MutateOverrideOptions<TResult> = Pick<UseMutationOptions<TResult, OperationVariables>, 'update' | 'optimisticResponse' | 'context' | 'updateQueries' | 'refetchQueries' | 'awaitRefetchQueries' | 'errorPolicy' | 'fetchPolicy' | 'clientId'>\nexport type MutateResult<TResult> = Promise<FetchResult<TResult, Record<string, any>, Record<string, any>> | null>\nexport type MutateFunction<TResult, TVariables> = (variables?: TVariables | null, overrideOptions?: MutateOverrideOptions<TResult>) => MutateResult<TResult>\n\nexport interface UseMutationReturn<TResult, TVariables> {\n  mutate: MutateFunction<TResult, TVariables>\n  loading: Ref<boolean>\n  error: Ref<ApolloError | null>\n  called: Ref<boolean>\n  onDone: (fn: (param: FetchResult<TResult, Record<string, any>, Record<string, any>>) => void) => {\n    off: () => void\n  }\n  onError: (fn: (param: ApolloError) => void) => {\n    off: () => void\n  }\n}\n\nexport function useMutation<\n  TResult = any,\n  TVariables extends OperationVariables = OperationVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  options: OptionsParameter<TResult, TVariables> = {},\n): UseMutationReturn<TResult, TVariables> {\n  const vm = getCurrentInstance()\n  const loading = ref<boolean>(false)\n  vm && trackMutation(loading)\n  const error = ref<ApolloError | null>(null)\n  const called = ref<boolean>(false)\n\n  const doneEvent = useEventHook<FetchResult<TResult, Record<string, any>, Record<string, any>>>()\n  const errorEvent = useEventHook<ApolloError>()\n\n  // Apollo Client\n  const { resolveClient } = useApolloClient()\n\n  async function mutate (variables?: TVariables | null, overrideOptions: Omit<UseMutationOptions<TResult, TVariables>, 'variables'> = {}) {\n    let currentDocument: DocumentNode\n    if (typeof document === 'function') {\n      currentDocument = document()\n    } else if (isRef(document)) {\n      currentDocument = document.value\n    } else {\n      currentDocument = document\n    }\n\n    let currentOptions: UseMutationOptions<TResult, TVariables>\n    if (typeof options === 'function') {\n      currentOptions = options()\n    } else if (isRef(options)) {\n      currentOptions = options.value\n    } else {\n      currentOptions = options\n    }\n    const client = resolveClient(currentOptions.clientId)\n    error.value = null\n    loading.value = true\n    called.value = true\n    try {\n      const result = await client.mutate<TResult, TVariables>({\n        mutation: currentDocument,\n        ...currentOptions,\n        ...overrideOptions,\n        variables: (variables ?? currentOptions.variables)\n          ? {\n            ...(currentOptions.variables as TVariables),\n            ...(variables as TVariables),\n          }\n          : undefined,\n      })\n      loading.value = false\n      doneEvent.trigger(result)\n      return result\n    } catch (e) {\n      const apolloError = toApolloError(e)\n      error.value = apolloError\n      loading.value = false\n      errorEvent.trigger(apolloError)\n      if (currentOptions.throws === 'always' || (currentOptions.throws !== 'never' && !errorEvent.getCount())) {\n        throw apolloError\n      }\n    }\n    return null\n  }\n\n  vm && onBeforeUnmount(() => {\n    loading.value = false\n  })\n\n  return {\n    mutate,\n    loading,\n    error,\n    called,\n    onDone: doneEvent.on,\n    onError: errorEvent.on,\n  }\n}\n", "import { DocumentNode } from 'graphql'\nimport {\n  Ref,\n  ref,\n  watch,\n  isRef,\n  computed,\n  getCurrentInstance,\n  onBeforeUnmount,\n  nextTick,\n} from 'vue-demi'\nimport {\n  OperationVariables,\n  SubscriptionOptions,\n  FetchResult,\n  Observable,\n  ObservableSubscription,\n  TypedDocumentNode,\n  ApolloError,\n} from '@apollo/client/core'\nimport { throttle, debounce } from 'throttle-debounce'\nimport { ReactiveFunction } from './util/ReactiveFunction'\nimport { paramToRef } from './util/paramToRef'\nimport { paramToReactive } from './util/paramToReactive'\nimport { useApolloClient } from './useApolloClient'\nimport { useEventHook } from './util/useEventHook'\nimport { trackSubscription } from './util/loadingTracking'\nimport type { CurrentInstance } from './util/types'\nimport { toApolloError } from './util/toApolloError'\nimport { isServer } from './util/env'\n\nexport interface UseSubscriptionOptions <\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  TResult = any,\n  TVariables = OperationVariables\n> extends Omit<SubscriptionOptions<TVariables>, 'query' | 'variables'> {\n  clientId?: string\n  enabled?: boolean\n  throttle?: number\n  debounce?: number\n}\n\ntype DocumentParameter<TResult, TVariables> = DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode> | TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>\ntype VariablesParameter<TVariables> = TVariables | Ref<TVariables> | ReactiveFunction<TVariables>\ntype OptionsParameter<TResult, TVariables> = UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>> | ReactiveFunction<UseSubscriptionOptions<TResult, TVariables>>\n\nexport interface UseSubscriptionReturn<TResult, TVariables> {\n  result: Ref<TResult | null | undefined>\n  loading: Ref<boolean>\n  error: Ref<ApolloError | null>\n  start: () => void\n  stop: () => void\n  restart: () => void\n  document: Ref<DocumentNode>\n  variables: Ref<TVariables | undefined>\n  options: UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>>\n  subscription: Ref<Observable<FetchResult<TResult, Record<string, any>, Record<string, any>>> | null>\n  onResult: (fn: (param: FetchResult<TResult, Record<string, any>, Record<string, any>>) => void) => {\n    off: () => void\n  }\n  onError: (fn: (param: ApolloError) => void) => {\n    off: () => void\n  }\n}\n\n/**\n * Use a subscription that does not require variables or options.\n * */\nexport function useSubscription<TResult = any> (\n  document: DocumentParameter<TResult, undefined>\n): UseSubscriptionReturn<TResult, undefined>\n\n/**\n * Use a subscription that requires options but not variables.\n */\nexport function useSubscription<TResult = any> (\n  document: DocumentParameter<TResult, undefined>,\n  variables: undefined | null,\n  options: OptionsParameter<TResult, null>\n): UseSubscriptionReturn<TResult, null>\n\n/**\n * Use a subscription that requires variables.\n */\nexport function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>\n): UseSubscriptionReturn<TResult, TVariables>\n\n/**\n * Use a subscription that has optional variables.\n */\nexport function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n): UseSubscriptionReturn<TResult, TVariables>\n\n/**\n * Use a subscription that requires variables and options.\n */\nexport function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>,\n  options: OptionsParameter<TResult, TVariables>\n): UseSubscriptionReturn<TResult, TVariables>\n\nexport function useSubscription <\n  TResult,\n  TVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables> | undefined = undefined,\n  options: OptionsParameter<TResult, TVariables> = {},\n): UseSubscriptionReturn<TResult, TVariables> {\n  // Is on server?\n  const vm = getCurrentInstance() as CurrentInstance | null\n\n  const documentRef = paramToRef(document)\n  const variablesRef = paramToRef(variables)\n  const optionsRef = paramToReactive(options)\n\n  const result = ref<TResult | null | undefined>()\n  const resultEvent = useEventHook<FetchResult<TResult>>()\n  const error = ref<ApolloError | null>(null)\n  const errorEvent = useEventHook<ApolloError>()\n\n  const loading = ref(false)\n  vm && trackSubscription(loading)\n\n  // Apollo Client\n  const { resolveClient } = useApolloClient()\n\n  const subscription: Ref<Observable<FetchResult<TResult>> | null> = ref(null)\n  let observer: ObservableSubscription | null = null\n  let started = false\n\n  function start () {\n    if (started || !isEnabled.value || isServer) return\n    started = true\n    loading.value = true\n\n    const client = resolveClient(currentOptions.value?.clientId)\n\n    subscription.value = client.subscribe<TResult, TVariables>({\n      query: currentDocument,\n      variables: currentVariables,\n      ...currentOptions.value,\n    })\n\n    observer = subscription.value.subscribe({\n      next: onNextResult,\n      error: onError,\n    })\n  }\n\n  function onNextResult (fetchResult: FetchResult<TResult>) {\n    result.value = fetchResult.data\n    loading.value = false\n    resultEvent.trigger(fetchResult)\n  }\n\n  function onError (fetchError: unknown) {\n    const apolloError = toApolloError(fetchError)\n\n    error.value = apolloError\n    loading.value = false\n    errorEvent.trigger(apolloError)\n  }\n\n  function stop () {\n    if (!started) return\n    started = false\n    loading.value = false\n\n    if (subscription.value) {\n      subscription.value = null\n    }\n\n    if (observer) {\n      observer.unsubscribe()\n      observer = null\n    }\n  }\n\n  // Restart\n  let restarting = false\n  /**\n   * Queue a restart of the query (on next tick) if it is already active\n   */\n  function baseRestart () {\n    if (!started || restarting) return\n    restarting = true\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    nextTick(() => {\n      if (started) {\n        stop()\n        start()\n      }\n      restarting = false\n    })\n  }\n\n  let debouncedRestart: typeof baseRestart\n  function updateRestartFn () {\n    if (currentOptions.value?.throttle) {\n      debouncedRestart = throttle(currentOptions.value.throttle, baseRestart)\n    } else if (currentOptions.value?.debounce) {\n      debouncedRestart = debounce(currentOptions.value.debounce, baseRestart)\n    } else {\n      debouncedRestart = baseRestart\n    }\n  }\n\n  function restart () {\n    if (!debouncedRestart) updateRestartFn()\n    debouncedRestart()\n  }\n\n  // Applying options\n  const currentOptions = ref<UseSubscriptionOptions<TResult, TVariables>>()\n  watch(() => isRef(optionsRef) ? optionsRef.value : optionsRef, value => {\n    if (currentOptions.value && (\n      currentOptions.value.throttle !== value.throttle ||\n      currentOptions.value.debounce !== value.debounce\n    )) {\n      updateRestartFn()\n    }\n    currentOptions.value = value\n    restart()\n  }, {\n    deep: true,\n    immediate: true,\n  })\n\n  // Applying document\n  let currentDocument: DocumentNode\n  watch(documentRef, value => {\n    currentDocument = value\n    restart()\n  }, {\n    immediate: true,\n  })\n\n  // Applying variables\n  let currentVariables: TVariables | undefined\n  let currentVariablesSerialized: string\n  watch(variablesRef, (value, oldValue) => {\n    const serialized = JSON.stringify(value)\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value\n      restart()\n    }\n    currentVariablesSerialized = serialized\n  }, {\n    deep: true,\n    immediate: true,\n  })\n\n  // Internal enabled returned to user\n  // @TODO Doesn't fully work yet, need to initialize with option\n  // const enabled = ref<boolean>()\n  const enabledOption = computed(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled)\n  // const isEnabled = computed(() => !!((typeof enabled.value === 'boolean' && enabled.value) && enabledOption.value))\n  const isEnabled = enabledOption\n\n  // watch(enabled, value => {\n  //   if (value == null) {\n  //     enabled.value = enabledOption.value\n  //   }\n  // })\n\n  // Auto start & stop\n  watch(isEnabled, value => {\n    if (value) {\n      start()\n    } else {\n      stop()\n    }\n  }, {\n    immediate: true,\n  })\n\n  // Teardown\n  vm && onBeforeUnmount(stop)\n\n  return {\n    result,\n    loading,\n    error,\n    // @TODO doesn't fully work yet\n    // enabled,\n    start,\n    stop,\n    restart,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    subscription,\n    onResult: resultEvent.on,\n    onError: errorEvent.on,\n  }\n}\n", "import { Ref, computed } from 'vue-demi'\nimport { ExtractSingleKey } from './util/ExtractSingleKey'\nimport type { DeepNonNullable, DeepRequired } from 'ts-essentials'\n\nexport type UseResultReturn<T> = Readonly<Ref<Readonly<T>>>\n\n/**\n * Resolve a `result`, returning either the first key of the `result` if there\n * is only one, or the `result` itself. The `value` of the ref will be\n * `undefined` until it is resolved.\n *\n * @example\n * const { result } = useQuery(...)\n * const user = useResult(result)\n * // user is `undefined` until the query resolves\n *\n * @param  {Ref<TResult>} result A `result` returned from `useQuery` to resolve.\n * @returns Readonly ref with `undefined` or the resolved `result`.\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<TResult, TResultKey extends keyof NonNullable<TResult> = keyof NonNullable<TResult>> (\n  result: Ref<TResult>\n): UseResultReturn<undefined | ExtractSingleKey<NonNullable<TResult>, TResultKey>>\n\n/**\n * Resolve a `result`, returning either the first key of the `result` if there\n * is only one, or the `result` itself. The `value` of the ref will be\n * `defaultValue` until it is resolved.\n *\n * @example\n * const { result } = useQuery(...)\n * const profile = useResult(result, {})\n * // profile is `{}` until the query resolves\n *\n * @param  {Ref<TResult>} result A `result` returned from `useQuery` to resolve.\n * @param  {TDefaultValue} defaultValue The default return value before `result` is resolved.\n * @returns Readonly ref with the `defaultValue` or the resolved `result`.\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<TResult, TDefaultValue, TResultKey extends keyof NonNullable<TResult> = keyof NonNullable<TResult>> (\n  result: Ref<TResult>,\n  defaultValue: TDefaultValue\n): UseResultReturn<TDefaultValue | ExtractSingleKey<NonNullable<TResult>, TResultKey>>\n\n/**\n * Resolve a `result`, returning the `result` mapped with the `pick` function.\n * The `value` of the ref will be `defaultValue` until it is resolved.\n *\n * @example\n * const { result } = useQuery(...)\n * const comments = useResult(result, undefined, (data) => data.comments)\n * // user is `undefined`, then resolves to the result's `comments`\n *\n * @param  {Ref<TResult>} result A `result` returned from `useQuery` to resolve.\n * @param  {TDefaultValue} defaultValue The default return value before `result` is resolved.\n * @param  {(data:TResult)=>TReturnValue} pick The function that receives `result` and maps a return value from it.\n * @returns Readonly ref with the `defaultValue` or the resolved and `pick`-mapped `result`\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<\n  TResult,\n  TDefaultValue,\n  TReturnValue,\n> (\n  result: Ref<TResult>,\n  defaultValue: TDefaultValue | undefined,\n  pick: (data: DeepRequired<DeepNonNullable<TResult>>) => TReturnValue\n): UseResultReturn<TDefaultValue | TReturnValue>\n\n/**\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<\n  TResult,\n  TDefaultValue,\n  TReturnValue,\n> (\n  result: Ref<TResult>,\n  defaultValue?: TDefaultValue,\n  pick?: (data: DeepRequired<DeepNonNullable<TResult>>) => TReturnValue,\n): UseResultReturn<TResult | TResult[keyof TResult] | TDefaultValue | TReturnValue | undefined> {\n  console.warn(`'useResult' is deprecated and will be removed soon. Plase use a computed instead.\nBefore:\nconst items = useResult(result, [], data => data.someField.myItems)\nAfter:\nconst items = computed(() => result.value?.someField.myItems ?? [])`)\n  return computed(() => {\n    const value = result.value\n    if (value) {\n      if (pick) {\n        try {\n          return pick(value as DeepRequired<DeepNonNullable<TResult>>)\n        } catch (e) {\n          // Silent error\n        }\n      } else {\n        const keys = Object.keys(value)\n        if (keys.length === 1) {\n          // Automatically take the only key in result data\n          return value[keys[0] as keyof TResult]\n        } else {\n          // Return entire result data\n          return value\n        }\n      }\n    }\n    return defaultValue\n  })\n}\n", "import { getCurrentTracking, getAppTracking } from './util/loadingTracking'\nimport { computed } from 'vue-demi'\n\nexport function useQueryLoading () {\n  const { tracking } = getCurrentTracking()\n  return computed(() => tracking.queries.value > 0)\n}\n\nexport function useMutationLoading () {\n  const { tracking } = getCurrentTracking()\n  return computed(() => tracking.mutations.value > 0)\n}\n\nexport function useSubscriptionLoading () {\n  const { tracking } = getCurrentTracking()\n  return computed(() => tracking.subscriptions.value > 0)\n}\n\nexport function useGlobalQueryLoading () {\n  const { appTracking } = getAppTracking()\n  return computed(() => appTracking.queries.value > 0)\n}\n\nexport function useGlobalMutationLoading () {\n  const { appTracking } = getAppTracking()\n  return computed(() => appTracking.mutations.value > 0)\n}\n\nexport function useGlobalSubscriptionLoading () {\n  const { appTracking } = getAppTracking()\n  return computed(() => appTracking.subscriptions.value > 0)\n}\n"],
  "mappings": "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",
  "names": []
}
