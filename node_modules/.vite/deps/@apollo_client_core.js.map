{
  "version": 3,
  "sources": ["../../ts-invariant/src/invariant.ts", "../../@apollo/src/utilities/globals/maybe.ts", "../../@apollo/src/utilities/globals/global.ts", "../../@apollo/src/utilities/globals/DEV.ts", "../../@apollo/src/utilities/globals/fix-graphql.ts", "../../@apollo/src/utilities/globals/index.ts", "../../@apollo/src/utilities/graphql/directives.ts", "../../@apollo/src/utilities/graphql/fragments.ts", "../../@apollo/src/utilities/common/objects.ts", "../../@apollo/src/utilities/graphql/storeUtils.ts", "../../@apollo/src/utilities/graphql/getFromAST.ts", "../../@apollo/src/utilities/common/filterInPlace.ts", "../../@apollo/src/utilities/graphql/transform.ts", "../../@apollo/src/utilities/common/mergeDeep.ts", "../../zen-observable-ts/module.js", "../../@apollo/client/node_modules/symbol-observable/es/ponyfill.js", "../../@apollo/client/node_modules/symbol-observable/es/index.js", "../../@apollo/src/utilities/observables/Observable.ts", "../../@apollo/src/utilities/common/cloneDeep.ts", "../../@apollo/src/utilities/common/maybeDeepFreeze.ts", "../../@apollo/src/utilities/observables/iteration.ts", "../../@apollo/src/utilities/observables/asyncMap.ts", "../../@apollo/src/utilities/common/canUse.ts", "../../@apollo/src/utilities/observables/subclassing.ts", "../../@apollo/src/utilities/observables/Concast.ts", "../../@apollo/src/utilities/common/arrays.ts", "../../@apollo/src/utilities/common/errorHandling.ts", "../../@apollo/src/utilities/common/compact.ts", "../../@apollo/src/utilities/common/makeUniqueId.ts", "../../@apollo/src/utilities/common/stringifyForDisplay.ts", "../../@apollo/src/utilities/common/mergeOptions.ts", "../../@apollo/src/link/utils/fromError.ts", "../../@apollo/src/link/utils/toPromise.ts", "../../@apollo/src/link/utils/fromPromise.ts", "../../@apollo/src/link/utils/throwServerError.ts", "../../@apollo/src/link/utils/validateOperation.ts", "../../@apollo/src/link/utils/createOperation.ts", "../../@apollo/src/link/utils/transformOperation.ts", "../../@apollo/src/link/core/ApolloLink.ts", "../../@apollo/src/link/core/empty.ts", "../../@apollo/src/link/core/from.ts", "../../@apollo/src/link/core/split.ts", "../../@apollo/src/link/core/concat.ts", "../../@apollo/src/link/core/execute.ts", "../../@apollo/src/version.ts", "../../@apollo/src/link/http/parseAndCheckHttpResponse.ts", "../../@apollo/src/link/http/serializeFetchParameter.ts", "../../@apollo/src/link/http/selectHttpOptionsAndBody.ts", "../../@apollo/src/link/http/checkFetcher.ts", "../../@apollo/src/link/http/createSignalIfSupported.ts", "../../@apollo/src/link/http/selectURI.ts", "../../@apollo/src/link/http/rewriteURIForGET.ts", "../../@apollo/src/link/http/createHttpLink.ts", "../../@apollo/src/link/http/HttpLink.ts", "../../@wry/equality/src/equality.ts", "../../@wry/trie/src/trie.ts", "../../@wry/context/src/slot.ts", "../../@wry/context/src/context.ts", "../../optimism/src/cache.ts", "../../optimism/src/context.ts", "../../optimism/src/helpers.ts", "../../optimism/src/entry.ts", "../../optimism/src/dep.ts", "../../optimism/src/index.ts", "../../@apollo/src/cache/core/cache.ts", "../../@apollo/src/cache/core/types/Cache.ts", "../../@apollo/src/cache/core/types/common.ts", "../../@apollo/src/cache/inmemory/helpers.ts", "../../@apollo/src/cache/inmemory/entityStore.ts", "../../@apollo/src/cache/inmemory/object-canon.ts", "../../@apollo/src/cache/inmemory/readFromStore.ts", "../../@apollo/src/cache/inmemory/reactiveVars.ts", "../../@apollo/src/cache/inmemory/key-extractor.ts", "../../@apollo/src/cache/inmemory/policies.ts", "../../@apollo/src/cache/inmemory/writeToStore.ts", "../../@apollo/src/cache/inmemory/inMemoryCache.ts", "../../@apollo/src/errors/index.ts", "../../@apollo/src/core/networkStatus.ts", "../../@apollo/src/core/ObservableQuery.ts", "../../@apollo/src/core/LocalState.ts", "../../@apollo/src/core/QueryInfo.ts", "../../@apollo/src/core/QueryManager.ts", "../../@apollo/src/core/ApolloClient.ts", "../../@apollo/src/core/index.ts"],
  "sourcesContent": ["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n", "export function maybe<T>(thunk: () => T): T | undefined {\n  try { return thunk() } catch {}\n}\n", "import { maybe } from \"./maybe\";\n\ndeclare global {\n  // Despite our attempts to reuse the React Native __DEV__ constant instead of\n  // inventing something new and Apollo-specific, declaring a useful type for\n  // __DEV__ unfortunately conflicts (TS2451) with the global declaration in\n  // @types/react-native/index.d.ts.\n  //\n  // To hide that harmless conflict, we @ts-ignore this line, which should\n  // continue to provide a type for __DEV__ elsewhere in the Apollo Client\n  // codebase, even when @types/react-native is not in use.\n  //\n  // However, because TypeScript drops @ts-ignore comments when generating .d.ts\n  // files (https://github.com/microsoft/TypeScript/issues/38628), we also\n  // sanitize the dist/utilities/globals/global.d.ts file to avoid declaring\n  // __DEV__ globally altogether when @apollo/client is installed in the\n  // node_modules directory of an application.\n  //\n  // @ts-ignore\n  const __DEV__: boolean | undefined;\n}\n\nexport default (\n  maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n) as typeof globalThis & {\n  __DEV__: typeof __DEV__;\n};\n", "import global from \"./global\";\nimport { maybe } from \"./maybe\";\n\n// To keep string-based find/replace minifiers from messing with __DEV__ inside\n// string literals or properties like global.__DEV__, we construct the \"__DEV__\"\n// string in a roundabout way that won't be altered by find/replace strategies.\nconst __ = \"__\";\nconst GLOBAL_KEY = [__, __].join(\"DEV\");\n\nfunction getDEV() {\n  try {\n    return Boolean(__DEV__);\n  } catch {\n    Object.defineProperty(global, GLOBAL_KEY, {\n      // In a buildless browser environment, maybe(() => process.env.NODE_ENV)\n      // evaluates as undefined, so __DEV__ becomes true by default, but can be\n      // initialized to false instead by a script/module that runs earlier.\n      value: maybe(() => process.env.NODE_ENV) !== \"production\",\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    });\n    // Using computed property access rather than global.__DEV__ here prevents\n    // string-based find/replace strategies from munging this to global.false:\n    return (global as any)[GLOBAL_KEY];\n  }\n}\n\nexport default getDEV();\n", "// The ordering of these imports is important, because it ensures the temporary\n// process.env.NODE_ENV polyfill is defined globally (if necessary) before we\n// import { Source } from 'graphql'. The instanceOf function that we really care\n// about (the one that uses process.env.NODE_ENV) is not exported from the\n// top-level graphql package, but graphql/language/source uses instanceOf, and\n// has relatively few dependencies, so importing it here should not increase\n// bundle sizes as much as other options.\nimport { remove } from 'ts-invariant/process';\nimport { Source } from 'graphql';\n\nexport function removeTemporaryGlobals() {\n  // Using Source here here just to make sure it won't be tree-shaken away.\n  return typeof Source === \"function\" ? remove() : remove();\n}\n", "import { invariant, InvariantError } from \"ts-invariant\";\n\n// Just in case the graphql package switches from process.env.NODE_ENV to\n// __DEV__, make sure __DEV__ is polyfilled before importing graphql.\nimport DEV from \"./DEV\";\nexport { DEV }\nexport function checkDEV() {\n  invariant(\"boolean\" === typeof DEV, DEV);\n}\n\n// Import graphql/jsutils/instanceOf safely, working around its unchecked usage\n// of process.env.NODE_ENV and https://github.com/graphql/graphql-js/pull/2894.\nimport { removeTemporaryGlobals } from \"./fix-graphql\";\n\n// Synchronously undo the global process.env.NODE_ENV polyfill that we created\n// temporarily while importing the offending graphql/jsutils/instanceOf module.\nremoveTemporaryGlobals();\n\nexport { maybe } from \"./maybe\";\nexport { default as global } from \"./global\";\nexport { invariant, InvariantError }\n\n// Ensure __DEV__ was properly initialized, and prevent tree-shaking bundlers\n// from mistakenly pruning the ./DEV module (see issue #8674).\ncheckDEV();\n", "import { invariant } from '../globals';\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n", "import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from 'graphql';\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition' as Kind,\n        // OperationTypeNode is an enum\n        operation: 'query' as OperationTypeNode,\n        selectionSet: {\n          kind: 'SelectionSet' as Kind,\n          selections: [\n            {\n              kind: 'FragmentSpread' as Kind,\n              name: {\n                kind: 'Name' as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n", "export function isNonNullObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n", "import { InvariantError } from '../globals';\n\nimport {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n} from 'graphql';\n\nimport { isNonNullObject } from '../common/objects';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport const getStoreKeyName = Object.assign(function (\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify(s: typeof stringify) {\n    const previous = stringify;\n    stringify = s;\n    return previous;\n  },\n});\n\n// Default stable JSON.stringify implementation. Can be updated/replaced with\n// something better by calling getStoreKeyName.setStringify.\nlet stringify = function defaultStringify(value: any): string {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key: string, value: any): any {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce((copy, key) => {\n      copy[key] = value[key];\n      return copy;\n    }, {} as Record<string, any>);\n  }\n  return value;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n", "import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { valueToObjectRepresentation } from './storeUtils';\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x!.name!.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(def => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode,\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n", "export function filterInPlace<T>(\n  array: T[],\n  test: (elem: T) => boolean,\n  context?: any,\n): T[] {\n  let target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n", "import { invariant } from '../globals';\n\nimport {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n  visit,\n  ASTNode,\n} from 'graphql';\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from '../common/filterInPlace';\nimport { isField, isInlineFragment } from './storeUtils';\nimport {\n  createFragmentMap,\n  FragmentMap,\n} from './fragments';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field' as Kind,\n  name: {\n    kind: 'Name' as Kind,\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): boolean {\n  return op.selectionSet.selections.every(\n    selection =>\n      selection.kind === 'FragmentSpread' &&\n      isEmpty(fragments[selection.name.value], fragments),\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll first check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // document.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !!v.name && !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !!fs.name && !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport const addTypenameToDocument = Object.assign(function <\n  TNode extends ASTNode\n>(\n  doc: TNode\n): TNode {\n  return visit(doc, {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}, {\n  added(field: FieldNode): boolean {\n    return field === TYPENAME_FIELD;\n  },\n});\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true,\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ) : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach(arg => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n", "import { isNonNullObject } from \"./objects\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(observer, subscriber) {\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.unsubscribe = function unsubscribe() {\n    if (this._state !== 'closed') {\n      closeSubscription(this);\n      cleanupSubscription(this);\n    }\n  };\n\n  _createClass(Subscription, [{\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = /*#__PURE__*/function () {\n  function SubscriptionObserver(subscription) {\n    this._subscription = subscription;\n  }\n\n  var _proto2 = SubscriptionObserver.prototype;\n\n  _proto2.next = function next(value) {\n    onNotify(this._subscription, 'next', value);\n  };\n\n  _proto2.error = function error(value) {\n    onNotify(this._subscription, 'error', value);\n  };\n\n  _proto2.complete = function complete() {\n    onNotify(this._subscription, 'complete');\n  };\n\n  _createClass(SubscriptionObserver, [{\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = /*#__PURE__*/function () {\n  function Observable(subscriber) {\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  var _proto3 = Observable.prototype;\n\n  _proto3.subscribe = function subscribe(observer) {\n    if (typeof observer !== 'object' || observer === null) {\n      observer = {\n        next: observer,\n        error: arguments[1],\n        complete: arguments[2]\n      };\n    }\n\n    return new Subscription(observer, this._subscriber);\n  };\n\n  _proto3.forEach = function forEach(fn) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof fn !== 'function') {\n        reject(new TypeError(fn + ' is not a function'));\n        return;\n      }\n\n      function done() {\n        subscription.unsubscribe();\n        resolve();\n      }\n\n      var subscription = _this.subscribe({\n        next: function (value) {\n          try {\n            fn(value, done);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  };\n\n  _proto3.map = function map(fn) {\n    var _this2 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this2.subscribe({\n        next: function (value) {\n          try {\n            value = fn(value);\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.filter = function filter(fn) {\n    var _this3 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this3.subscribe({\n        next: function (value) {\n          try {\n            if (!fn(value)) return;\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.reduce = function reduce(fn) {\n    var _this4 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n    return new C(function (observer) {\n      return _this4.subscribe({\n        next: function (value) {\n          var first = !hasValue;\n          hasValue = true;\n\n          if (!first || hasSeed) {\n            try {\n              acc = fn(acc, value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          } else {\n            acc = value;\n          }\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n          observer.next(acc);\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.concat = function concat() {\n    var _this5 = this;\n\n    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n      sources[_key] = arguments[_key];\n    }\n\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscription;\n      var index = 0;\n\n      function startNext(next) {\n        subscription = next.subscribe({\n          next: function (v) {\n            observer.next(v);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (index === sources.length) {\n              subscription = undefined;\n              observer.complete();\n            } else {\n              startNext(C.from(sources[index++]));\n            }\n          }\n        });\n      }\n\n      startNext(_this5);\n      return function () {\n        if (subscription) {\n          subscription.unsubscribe();\n          subscription = undefined;\n        }\n      };\n    });\n  };\n\n  _proto3.flatMap = function flatMap(fn) {\n    var _this6 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscriptions = [];\n\n      var outer = _this6.subscribe({\n        next: function (value) {\n          if (fn) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          }\n\n          var inner = C.from(value).subscribe({\n            next: function (value) {\n              observer.next(value);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              var i = subscriptions.indexOf(inner);\n              if (i >= 0) subscriptions.splice(i, 1);\n              completeIfDone();\n            }\n          });\n          subscriptions.push(inner);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          completeIfDone();\n        }\n      });\n\n      function completeIfDone() {\n        if (outer.closed && subscriptions.length === 0) observer.complete();\n      }\n\n      return function () {\n        subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n        outer.unsubscribe();\n      };\n    });\n  };\n\n  _proto3[SymbolObservable] = function () {\n    return this;\n  };\n\n  Observable.from = function from(x) {\n    var C = typeof this === 'function' ? this : Observable;\n    if (x == null) throw new TypeError(x + ' is not an object');\n    var method = getMethod(x, SymbolObservable);\n\n    if (method) {\n      var observable = method.call(x);\n      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n      if (isObservable(observable) && observable.constructor === C) return observable;\n      return new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    if (hasSymbol('iterator')) {\n      method = getMethod(x, SymbolIterator);\n\n      if (method) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {\n              var item = _step.value;\n              observer.next(item);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < x.length; ++i) {\n            observer.next(x[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n\n    throw new TypeError(x + ' is not observable');\n  };\n\n  Observable.of = function of() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    var C = typeof this === 'function' ? this : Observable;\n    return new C(function (observer) {\n      enqueue(function () {\n        if (observer.closed) return;\n\n        for (var i = 0; i < items.length; ++i) {\n          observer.next(items[i]);\n          if (observer.closed) return;\n        }\n\n        observer.complete();\n      });\n    });\n  };\n\n  _createClass(Observable, null, [{\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}\n\nexport { Observable };\n", "export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\n\t\t\tif (typeof Symbol.for === 'function') {\n\t\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t\t// META: It's a resource locator!\n\t\t\t\tresult = Symbol.for('https://github.com/benlesh/symbol-observable');\n\t\t\t} else {\n\t\t\t\t// Symbol.for didn't exist! The best we can do at this point is a totally \n\t\t\t\t// unique symbol. Note that the string argument here is a descriptor, not\n\t\t\t\t// an identifier. This symbol is unique.\n\t\t\t\tresult = Symbol('https://github.com/benlesh/symbol-observable');\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tSymbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n", "/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n", "import {\n  Observable,\n  Observer,\n  Subscription as ObservableSubscription,\n  Subscriber,\n} from 'zen-observable-ts';\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport 'symbol-observable';\n\nexport type {\n  Observer,\n  ObservableSubscription,\n  Subscriber,\n};\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = '@@observable' as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () { return this; };\n}\n\nexport { Observable };\n", "const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n", "import '../globals'; // For __DEV__\nimport { isNonNullObject } from './objects';\n\nfunction deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach(obj => {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach(name => {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze<T extends object>(obj: T): T | null {\n  if (__DEV__ && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n  return obj;\n}\n\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (__DEV__) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n", "import { Observer } from \"./Observable\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n", "import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n", "import { maybe } from \"../globals\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === 'function' &&\n  maybe(() => navigator.product) !== 'ReactNative';\n\nexport const canUseWeakSet = typeof WeakSet === 'function';\n\nexport const canUseSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.for === 'function';\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = canUseDOM && !usingJSDOM;\n", "import { Observable } from \"./Observable\";\nimport { canUseSymbol } from \"../common/canUse\";\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass<\n  S extends new (...args: any[]) => Observable<any>,\n>(subclass: S): S {\n  function set(key: symbol | string) {\n    // Object.defineProperty is necessary because the Symbol.species\n    // property is a getter by default in modern JS environments, so we\n    // can't assign to it with a normal assignment expression.\n    Object.defineProperty(subclass, key, { value: Observable });\n  }\n  if (canUseSymbol && Symbol.species) {\n    set(Symbol.species);\n  }\n  // The \"@@species\" string is used as a fake Symbol.species value in some\n  // polyfill systems (including the SymbolSpecies variable used by\n  // zen-observable), so we should set it as well, to be safe.\n  set(\"@@species\");\n  return subclass;\n}\n", "import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\nexport type ConcastSourcesArray<T> = Array<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  // Note: cleanup observers do not count towards this total.\n  private addCount = 0;\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  }\n\n  public removeObserver(\n    observer: Observer<T>,\n    quietly?: boolean,\n  ) {\n    if (this.observers.delete(observer) &&\n        --this.addCount < 1 &&\n        !quietly) {\n      // In case there are still any cleanup observers in this.observers, and no\n      // error or completion has been broadcast yet, make sure those observers\n      // have a chance to run and then remove themselves from this.observers.\n      this.handlers.complete();\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\" | \"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      const { sub } = this;\n      if (sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          if (sub) setTimeout(() => sub.unsubscribe());\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  public cleanup(callback: () => any) {\n    let called = false;\n    const once = () => {\n      if (!called) {\n        called = true;\n        // Removing a cleanup observer should not unsubscribe from the\n        // underlying Observable, so the only removeObserver behavior we\n        // need here is to delete observer from this.observers.\n        this.observers.delete(observer);\n        callback();\n      }\n    }\n    const observer = {\n      next: once,\n      error: once,\n      complete: once,\n    };\n    const count = this.addCount;\n    this.addObserver(observer);\n    // Normally addObserver increments this.addCount, but we can \"hide\"\n    // cleanup observers by restoring this.addCount to its previous value\n    // after adding any cleanup observer.\n    this.addCount = count;\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n", "export function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n", "import { ExecutionResult } from 'graphql';\n\nexport function graphQLResultHasError(result: ExecutionResult<unknown>): boolean {\n  return (result.errors && result.errors.length > 0) || false;\n}\n", "import { TupleToIntersection } from './mergeDeep';\n\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */\nexport function compact<TArgs extends any[]>(\n  ...objects: TArgs\n): TupleToIntersection<TArgs> {\n  const result = Object.create(null);\n\n  objects.forEach(obj => {\n    if (!obj) return;\n    Object.keys(obj).forEach(key => {\n      const value = (obj as any)[key];\n      if (value !== void 0) {\n        result[key] = value;\n      }\n    });\n  });\n\n  return result;\n}\n", "const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n", "import { makeUniqueId } from \"./makeUniqueId\";\n\nexport function stringifyForDisplay(value: any): string {\n  const undefId = makeUniqueId(\"stringifyForDisplay\");\n  return JSON.stringify(value, (key, value) => {\n    return value === void 0 ? undefId : value;\n  }).split(JSON.stringify(undefId)).join(\"<undefined>\");\n}\n", "import type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n} from \"../../core\";\n\nimport { compact } from \"./compact\";\n\ntype OptionsUnion<TData, TVariables, TContext> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables, TContext>;\n\nexport function mergeOptions<\n  TOptions extends OptionsUnion<any, any, any>\n>(\n  defaults: TOptions | Partial<TOptions> | undefined,\n  options: TOptions | Partial<TOptions>,\n): TOptions {\n  return compact(defaults, options, options.variables && {\n    variables: {\n      ...(defaults && defaults.variables),\n      ...options.variables,\n    },\n  });\n}\n", "import { Observable } from '../../utilities';\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n", "import { invariant } from '../../utilities/globals';\nimport { Observable } from '../../utilities';\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n", "import { Observable } from '../../utilities';\n\nexport function fromPromise<T>(promise: Promise<T>): Observable<T> {\n  return new Observable<T>(observer => {\n    promise\n      .then((value: T) => {\n        observer.next(value);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n}\n", "export type ServerError = Error & {\n  response: Response;\n  result: Record<string, any>;\n  statusCode: number;\n};\n\nexport const throwServerError = (\n  response: Response,\n  result: any,\n  message: string\n) => {\n  const error = new Error(message) as ServerError;\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n", "import { InvariantError } from '../../utilities/globals'\nimport { GraphQLRequest } from '../core';\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n", "import { GraphQLRequest, Operation } from '../core';\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = (next: any) => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  return operation as Operation;\n}\n", "import { GraphQLRequest, Operation } from '../core';\nimport { getOperationName } from '../../utilities';\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // Best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query) || undefined\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n", "import { InvariantError, invariant } from '../../utilities/globals';\n\nimport { Observable, Observer } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n", "import { ApolloLink } from './ApolloLink';\n\nexport const empty = ApolloLink.empty;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const from = ApolloLink.from;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const split = ApolloLink.split;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const concat = ApolloLink.concat;\n", "import { ApolloLink } from './ApolloLink';\n\nexport const execute = ApolloLink.execute;\n", "export const version = 'local';\n", "import { Operation } from '../core';\nimport { throwServerError } from '../utils';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport function parseAndCheckHttpResponse(\n  operations: Operation | Operation[],\n) {\n  return (response: Response) => response\n    .text()\n    .then(bodyText => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        const parseError = err as ServerParseError;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n      }\n    })\n    .then((result: any) => {\n      if (response.status >= 300) {\n        // Network error\n        throwServerError(\n          response,\n          result,\n          `Response not successful: Received status code ${response.status}`,\n        );\n      }\n\n      if (\n        !Array.isArray(result) &&\n        !hasOwnProperty.call(result, 'data') &&\n        !hasOwnProperty.call(result, 'errors')\n      ) {\n        // Data error\n        throwServerError(\n          response,\n          result,\n          `Server response was missing for query '${\n            Array.isArray(operations)\n              ? operations.map(op => op.operationName)\n              : operations.operationName\n          }'.`,\n        );\n      }\n      return result;\n    });\n}\n", "import { InvariantError } from '../../utilities/globals';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n", "import { ASTNode, print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string\n};\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n   print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs,\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...headersToLowerCase(config.headers),\n      },\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n};\n\nfunction headersToLowerCase(\n  headers: Record<string, string> | undefined\n): typeof headers {\n  if (headers) {\n    const normalized = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalized[name.toLowerCase()] = headers[name];\n    });\n    return normalized;\n  }\n  return headers;\n}\n", "import { InvariantError } from '../../utilities/globals';\n\nexport const checkFetcher = (fetcher: WindowOrWorkerGlobalScope['fetch'] | undefined) => {\n  if (!fetcher && typeof fetch === 'undefined') {\n    throw new InvariantError(`\n\"fetch\" has not been found globally and no fetcher has been \\\nconfigured. To fix this, install a fetch package (like \\\nhttps://www.npmjs.com/package/cross-fetch), instantiate the \\\nfetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    `);\n  }\n};\n", "export const createSignalIfSupported = () => {\n  if (typeof AbortController === 'undefined')\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n", "import { Operation } from '../core';\n\nexport const selectURI = (\n  operation: Operation,\n  fallbackURI?: string | ((operation: Operation) => string),\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || '/graphql';\n  }\n};\n", "import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n", "import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n", "import { ApolloLink, RequestHandler } from '../core';\nimport { HttpOptions } from './selectHttpOptionsAndBody';\nimport { createHttpLink } from './createHttpLink';\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(public options: HttpOptions = {}) {\n    super(createHttpLink(options).request);\n  }\n}\n", "const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = definedKeys(a);\n      const bKeys = definedKeys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n      // Fall through...\n    case '[object DataView]': {\n      let len = a.byteLength;\n      if (len === b.byteLength) {\n        while (len-- && a[len] === b[len]) {\n          // Keep looping as long as the bytes are equal.\n        }\n      }\n      return len === -1;\n    }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]': {\n      const aCode = fnToStr.call(a);\n      if (aCode !== fnToStr.call(b)) {\n        return false;\n      }\n\n      // We consider non-native functions equal if they have the same code\n      // (native functions require === because their code is censored).\n      // Note that this behavior is not entirely sound, since !== function\n      // objects with the same code can behave differently depending on\n      // their closure scope. However, any function can behave differently\n      // depending on the values of its input arguments (including this)\n      // and its calling context (including its closure scope), even\n      // though the function object is === to itself; and it is entirely\n      // possible for functions that are not === to behave exactly the\n      // same under all conceivable circumstances. Because none of these\n      // factors are statically decidable in JavaScript, JS function\n      // equality is not well-defined. This ambiguity allows us to\n      // consider the best possible heuristic among various imperfect\n      // options, and equating non-native functions that have the same\n      // code has enormous practical benefits, such as when comparing\n      // functions that are repeatedly passed as fresh function\n      // expressions within objects that are otherwise deeply equal. Since\n      // any function created from the same syntactic expression (in the\n      // same code location) will always stringify to the same code\n      // according to fnToStr.call, we can reasonably expect these\n      // repeatedly passed function expressions to have the same code, and\n      // thus behave \"the same\" (with all the caveats mentioned above),\n      // even though the runtime function objects are !== to one another.\n      return !endsWith(aCode, nativeCodeSuffix);\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction definedKeys<TObject extends object>(obj: TObject) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey<TObject extends object>(\n  this: TObject,\n  key: keyof TObject,\n) {\n  return this[key] !== void 0;\n}\n\nconst nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full: string, suffix: string) {\n  const fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 &&\n    full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n", "// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n", "type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult, TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: TThis) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = Array as any;\n\nexport const Slot: ReturnType<typeof makeSlotClass> = host[globalKey] || function () {\n  const Slot = makeSlotClass();\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n  } finally {\n    return Slot;\n  }\n}();\n", "import { Slot } from \"./slot\";\nexport { Slot }\nexport const { bind, noContext } = Slot;\n\n// Relying on the @types/node declaration of global.setTimeout can make\n// things tricky for dowstream projects (see PR #7).\ndeclare function setTimeout(\n  callback: (...args: any[]) => any,\n  ms?: number,\n  ...args: any[]\n): any;\n\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback: () => any, delay: number) {\n  return setTimeout(bind(callback), delay);\n}\n\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen<\n  TArgs extends any[],\n  TYield = any,\n  TReturn = any,\n  TNext = any,\n>(\n  genFn: (...args: TArgs) => Generator<TYield, TReturn, TNext>\n) {\n  return function (this: any) {\n    const gen = genFn.apply(this, arguments as any);\n\n    type Method = (\n      this: Generator<TYield, TReturn, TNext>,\n      arg: any,\n    ) => IteratorResult<TYield, TReturn>;\n\n    const boundNext: Method = bind(gen.next);\n    const boundThrow: Method = bind(gen.throw!);\n\n    return new Promise((resolve, reject) => {\n      function invoke(method: Method, argument: any) {\n        try {\n          var result: any = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        const next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      const invokeNext = (value?: any) => invoke(boundNext, value);\n      const invokeThrow = (error: any) => invoke(boundThrow, error);\n      invokeNext();\n    });\n  } as (...args: TArgs) => Promise<any>;\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<any> {\n  return value && typeof value.then === \"function\";\n}\n\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers: Function[] = [];\nexport function wrapYieldingFiberMethods<F extends Function>(Fiber: F): F {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    const wrap = (obj: any, method: string) => {\n      const fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments as any, this);\n      };\n    }\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\n", "interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n", "import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n", "export const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const {\n  // This Array.from polyfill is restricted to working with Set<any> for now,\n  // but we can improve the polyfill and add other input types, as needed. Note\n  // that this fallback implementation will only be used if the host environment\n  // does not support a native Array.from function. In most modern JS runtimes,\n  // the toArray function exported here will be === Array.from.\n  from: toArray = (collection: Set<any>) => {\n    const array: any[] = [];\n    collection.forEach(item => array.push(item));\n    return array;\n  },\n} = Array;\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n", "import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, toArray, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      toArray(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = toArray(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n", "import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { hasOwnProperty, Unsubscribable, maybeUnsubscribe, toArray } from \"./helpers\";\n\ntype EntryMethodName = keyof typeof EntryMethods;\nconst EntryMethods = {\n  setDirty: true, // Mark parent Entry as needing to be recomputed (default)\n  dispose: true,  // Detach parent Entry from parents and children, but leave in LRU cache\n  forget: true,   // Fully remove parent Entry from LRU cache and computation graph\n};\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey, entryMethodName?: EntryMethodName) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(\n    key: TKey,\n    entryMethodName?: EntryMethodName,\n  ) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      const m: EntryMethodName = (\n        entryMethodName &&\n        hasOwnProperty.call(EntryMethods, entryMethodName)\n      ) ? entryMethodName : \"setDirty\";\n      // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n      toArray(dep).forEach(entry => entry[m]());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n", "import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\nfunction makeDefaultMakeCacheKeyFunction<\n  TKeyArgs extends any[],\n  TCacheKey = any,\n>(): (...args: TKeyArgs) => TCacheKey {\n  const keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nexport const defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs;\n  const makeCacheKey = options.makeCacheKey ||\n    makeDefaultMakeCacheKeyFunction<TKeyArgs, TCacheKey>();\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false,\n  });\n\n  function dirtyKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey;\n\n  return Object.freeze(optimistic);\n}\n", "import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>,\n  ): TData | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic :\n      options.optimistic === false ? null : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => updateResult = options.update(this),\n      optimisticId,\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // Experimental API\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      ...options,\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data,\n    }));\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data,\n    }));\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n}\n", "import { DataProxy } from './DataProxy';\nimport { Modifier, Modifiers } from './common';\nimport { ApolloCache } from '../cache';\n\nexport namespace Cache {\n  export type WatchCallback<TData = any> = (\n    diff: Cache.DiffResult<TData>,\n    lastDiff?: Cache.DiffResult<TData>,\n  ) => void;\n\n  export interface ReadOptions<TVariables = any, TData = any>\n    extends DataProxy.Query<TVariables, TData> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n    returnPartialData?: boolean;\n    canonizeResults?: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends Omit<DataProxy.Query<TVariables, TResult>, \"id\">,\n            Omit<DataProxy.WriteOptions<TResult>, \"data\">\n  {\n    dataId?: string;\n    result: TResult;\n  }\n\n  export interface DiffOptions<\n    TData = any,\n    TVariables = any,\n  > extends ReadOptions<TVariables, TData> {\n    // The DiffOptions interface is currently just an alias for\n    // ReadOptions, though DiffOptions used to be responsible for\n    // declaring the returnPartialData option.\n  }\n\n  export interface WatchOptions<\n    TData = any,\n    TVariables = any,\n  > extends ReadOptions<TVariables, TData> {\n    watcher?: object;\n    immediate?: boolean;\n    callback: WatchCallback<TData>;\n    lastDiff?: DiffResult<TData>;\n  }\n\n  export interface EvictOptions {\n    id?: string;\n    fieldName?: string;\n    args?: Record<string, any>;\n    broadcast?: boolean;\n  }\n\n  // Although you can call cache.reset() without options, its behavior can be\n  // configured by passing a Cache.ResetOptions object.\n  export interface ResetOptions {\n    discardWatches?: boolean;\n  }\n\n  export interface ModifyOptions {\n    id?: string;\n    fields: Modifiers | Modifier<any>;\n    optimistic?: boolean;\n    broadcast?: boolean;\n  }\n\n  export interface BatchOptions<\n    TCache extends ApolloCache<any>,\n    TUpdateResult = void,\n  > {\n    // Same as the first parameter of performTransaction, except the cache\n    // argument will have the subclass type rather than ApolloCache.\n    update(cache: TCache): TUpdateResult;\n\n    // Passing a string for this option creates a new optimistic layer, with the\n    // given string as its layer.id, just like passing a string for the\n    // optimisticId parameter of performTransaction. Passing true is the same as\n    // passing undefined to performTransaction (running the batch operation\n    // against the current top layer of the cache), and passing false is the\n    // same as passing null (running the operation against root/non-optimistic\n    // cache data).\n    optimistic?: string | boolean;\n\n    // If you specify the ID of an optimistic layer using this option, that\n    // layer will be removed as part of the batch transaction, triggering at\n    // most one broadcast for both the transaction and the removal of the layer.\n    // Note: this option is needed because calling cache.removeOptimistic during\n    // the transaction function may not be not safe, since any modifications to\n    // cache layers may be discarded after the transaction finishes.\n    removeOptimistic?: string;\n\n    // If you want to find out which watched queries were invalidated during\n    // this batch operation, pass this optional callback function. Returning\n    // false from the callback will prevent broadcasting this result.\n    onWatchUpdated?: (\n      this: TCache,\n      watch: Cache.WatchOptions,\n      diff: Cache.DiffResult<any>,\n      lastDiff: Cache.DiffResult<any> | undefined,\n    ) => any;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import ReadQueryOptions = DataProxy.ReadQueryOptions;\n  export import ReadFragmentOptions = DataProxy.ReadFragmentOptions;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import UpdateQueryOptions = DataProxy.UpdateQueryOptions;\n  export import UpdateFragmentOptions = DataProxy.UpdateFragmentOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n", "import { DocumentNode, FieldNode } from 'graphql';\n\nimport {\n  Reference,\n  StoreObject,\n  StoreValue,\n  isReference,\n} from '../../../utilities';\n\nimport { StorageType } from '../../inmemory/policies';\n\n// The Readonly<T> type only really works for object types, since it marks\n// all of the object's properties as readonly, but there are many cases when\n// a generic type parameter like TExisting might be a string or some other\n// primitive type, in which case we need to avoid wrapping it with Readonly.\n// SafeReadonly<string> collapses to just string, which makes string\n// assignable to SafeReadonly<any>, whereas string is not assignable to\n// Readonly<any>, somewhat surprisingly.\nexport type SafeReadonly<T> = T extends object ? Readonly<T> : T;\n\nexport type MissingTree = string | {\n  readonly [key: string]: MissingTree;\n};\n\nexport class MissingFieldError {\n  constructor(\n    public readonly message: string,\n    public readonly path: MissingTree | Array<string | number>,\n    public readonly query: DocumentNode,\n    public readonly variables?: Record<string, any>,\n  ) {}\n}\n\nexport interface FieldSpecifier {\n  typename?: string;\n  fieldName: string;\n  field?: FieldNode;\n  args?: Record<string, any>;\n  variables?: Record<string, any>;\n}\n\nexport interface ReadFieldOptions extends FieldSpecifier {\n  from?: StoreObject | Reference;\n}\n\nexport interface ReadFieldFunction {\n  <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\n  <V = StoreValue>(\n    fieldName: string,\n    from?: StoreObject | Reference,\n  ): SafeReadonly<V> | undefined;\n}\n\nexport type ToReferenceFunction = (\n  objOrIdOrRef: StoreObject | string | Reference,\n  mergeIntoStore?: boolean,\n) => Reference | undefined;\n\nexport type CanReadFunction = (value: StoreValue) => boolean;\n\nexport type Modifier<T> = (value: T, details: {\n  DELETE: any;\n  INVALIDATE: any;\n  fieldName: string;\n  storeFieldName: string;\n  readField: ReadFieldFunction;\n  canRead: CanReadFunction;\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n  storage: StorageType;\n}) => T;\n\nexport type Modifiers = {\n  [fieldName: string]: Modifier<any>;\n};\n", "import { SelectionSetNode } from 'graphql';\n\nimport {\n  NormalizedCache,\n  InMemoryCacheConfig,\n} from './types';\n\nimport { KeyFieldsContext } from './policies';\n\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n  isNonNullObject,\n  compact,\n} from '../../utilities';\n\nexport const {\n  hasOwnProperty: hasOwn,\n} = Object.prototype;\n\nexport function defaultDataIdFromObject(\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext,\n): string | undefined {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n         id !== void 0 ? {  id } :\n        _id !== void 0 ? { _id } :\n        void 0;\n    }\n    // If there is no object.id, fall back to object._id.\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return `${__typename}:${(\n        typeof id === \"number\" ||\n        typeof id === \"string\"\n      ) ? id : JSON.stringify(id)}`;\n    }\n  }\n}\n\nconst defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  // Thanks to the shouldCanonizeResults helper, this should be the only line\n  // you have to change to reenable canonization by default in the future.\n  canonizeResults: false,\n};\n\nexport function normalizeConfig(config: InMemoryCacheConfig) {\n  return compact(defaultConfig, config);\n}\n\nexport function shouldCanonizeResults(\n  config: Pick<InMemoryCacheConfig, \"canonizeResults\">,\n): boolean {\n  const value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (isNonNullObject(result)) {\n    return isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return isNonNullObject(value) &&\n    !isReference(value) &&\n    !isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n\nexport const isArray = (a: any): a is any[] | readonly any[] => Array.isArray(a)\n", "import { invariant } from '../../utilities/globals';\nimport { dep, OptimisticDependencyFunction } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(\n    older: string | StoreObject,\n    newer: StoreObject | string,\n  ): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\"\n        ? this.lookup(dataId = older)\n        : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\"\n        ? this.lookup(dataId = newer)\n        : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(\n      typeof dataId === \"string\",\n      \"store.merge expects a string ID\",\n    );\n\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty.__typename &&\n            !(existing && existing.__typename) &&\n            // Since we return default root __typename strings\n            // automatically from store.get, we don't need to dirty the\n            // ROOT_QUERY.__typename field if merged.__typename is equal\n            // to the default string (usually \"Query\").\n            this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId as string, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(\n    options: Cache.EvictOptions,\n    limit: EntityStore,\n  ): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null,\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\",\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string,\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName],\n                         parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group),\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge() {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge.apply(this.parent, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n", "import \"../../utilities/globals\";\n\nimport { Trie } from \"@wry/trie\";\nimport {\n  canUseWeakMap,\n  canUseWeakSet,\n  isNonNullObject as isObjectOrArray,\n} from \"../../utilities\";\nimport { isArray } from \"./helpers\";\n\nfunction shallowCopy<T>(value: T): T {\n  if (isObjectOrArray(value)) {\n    return isArray(value)\n      ? value.slice(0) as any as T\n      : { __proto__: Object.getPrototypeOf(value), ...value };\n  }\n  return value;\n}\n\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nexport class ObjectCanon {\n  // Set of all canonical objects this ObjectCanon has admitted, allowing\n  // canon.admit to return previously-canonicalized objects immediately.\n  private known = new (canUseWeakSet ? WeakSet : Set)<object>();\n\n  // Efficient storage/lookup structure for canonical objects.\n  private pool = new Trie<{\n    array?: any[];\n    object?: Record<string, any>;\n    keys?: SortedKeysInfo;\n  }>(canUseWeakMap);\n\n  public isKnown(value: any): boolean {\n    return isObjectOrArray(value) && this.known.has(value);\n  }\n\n  // Make the ObjectCanon assume this value has already been\n  // canonicalized.\n  private passes = new WeakMap<object, object>();\n  public pass<T>(value: T): T;\n  public pass(value: any) {\n    if (isObjectOrArray(value)) {\n      const copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  }\n\n  // Returns the canonical version of value.\n  public admit<T>(value: T): T;\n  public admit(value: any) {\n    if (isObjectOrArray(value)) {\n      const original = this.passes.get(value);\n      if (original) return original;\n\n      const proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype: {\n          if (this.known.has(value)) return value;\n          const array: any[] = (value as any[]).map(this.admit, this);\n          // Arrays are looked up in the Trie using their recursively\n          // canonicalized elements, and the known version of the array is\n          // preserved as node.array.\n          const node = this.pool.lookupArray(array);\n          if (!node.array) {\n            this.known.add(node.array = array);\n            // Since canonical arrays may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(array);\n            }\n          }\n          return node.array;\n        }\n\n        case null:\n        case Object.prototype: {\n          if (this.known.has(value)) return value;\n          const proto = Object.getPrototypeOf(value);\n          const array = [proto];\n          const keys = this.sortedKeys(value);\n          array.push(keys.json);\n          const firstValueIndex = array.length;\n          keys.sorted.forEach(key => {\n            array.push(this.admit((value as any)[key]));\n          });\n          // Objects are looked up in the Trie by their prototype (which\n          // is *not* recursively canonicalized), followed by a JSON\n          // representation of their (sorted) keys, followed by the\n          // sequence of recursively canonicalized values corresponding to\n          // those keys. To keep the final results unambiguous with other\n          // sequences (such as arrays that just happen to contain [proto,\n          // keys.json, value1, value2, ...]), the known version of the\n          // object is stored as node.object.\n          const node = this.pool.lookupArray(array);\n          if (!node.object) {\n            const obj = node.object = Object.create(proto);\n            this.known.add(obj);\n            keys.sorted.forEach((key, i) => {\n              obj[key] = array[firstValueIndex + i];\n            });\n            // Since canonical objects may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(obj);\n            }\n          }\n          return node.object;\n        }\n      }\n    }\n    return value;\n  }\n\n  // It's worthwhile to cache the sorting of arrays of strings, since the\n  // same initial unsorted arrays tend to be encountered many times.\n  // Fortunately, we can reuse the Trie machinery to look up the sorted\n  // arrays in linear time (which is faster than sorting large arrays).\n  private sortedKeys(obj: object) {\n    const keys = Object.keys(obj);\n    const node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      const json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = { sorted: keys, json });\n      }\n    }\n    return node.keys;\n  }\n  // Arrays that contain the same elements in a different order can share\n  // the same SortedKeysInfo object, to save memory.\n  private keysByJSON = new Map<string, SortedKeysInfo>();\n\n  // This has to come last because it depends on keysByJSON.\n  public readonly empty = this.admit({});\n}\n\ntype SortedKeysInfo = {\n  sorted: string[];\n  json: string;\n};\n\n// Since the keys of canonical objects are always created in lexicographically\n// sorted order, we can use the ObjectCanon to implement a fast and stable\n// version of JSON.stringify, which automatically sorts object keys.\nexport const canonicalStringify = Object.assign(function (value: any): string {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n    const canonical = stringifyCanon.admit(value);\n    let json = stringifyCache.get(canonical);\n    if (json === void 0) {\n      stringifyCache.set(\n        canonical,\n        json = JSON.stringify(canonical),\n      );\n    }\n    return json;\n  }\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify,\n});\n\n// Can be reset by calling canonicalStringify.reset().\nlet stringifyCanon: ObjectCanon;\nlet stringifyCache: WeakMap<object, string>;\n\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon;\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}\n", "import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  DeepMerger,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject, isArray, shouldCanonizeResults } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError, MissingTree } from '../core/types/common';\nimport { canonicalStringify, ObjectCanon } from './object-canon';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions,\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]>;\n\n  private config: {\n    cache: InMemoryCache,\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n  };\n\n  private knownResults = new (\n    canUseWeakMap ? WeakMap : Map\n  )<Record<string, any>, SelectionSetNode>();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon;\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon;\n\n    this.executeSelectionSet = wrap(options => {\n      const { canonizeResults } = options.context;\n\n      const peekArgs = execSelectionSetKeyArgs(options);\n\n      // Negate this boolean option so we can find out if we've already read\n      // this result using the other boolean value.\n      peekArgs[3] = !canonizeResults;\n\n      const other = this.executeSelectionSet.peek(...peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return {\n            ...other,\n            // If we previously read this result without canonizing it, we can\n            // reuse that result simply by canonizing it now.\n            result: this.canon.admit(other.result),\n          };\n        }\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            selectionSet,\n            isReference(parent) ? parent.__ref : parent,\n            context.varString,\n            canonizeResults,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey({ field, array, context }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            field,\n            array,\n            context.varString,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables,\n      )];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result),\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, { [resultName]: result.missing });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${\n                selection.name.value\n              }' on ${\n                isReference(objectOrReference)\n                  ? objectOrReference.__ref + \" object\"\n                  : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`\n            });\n          }\n\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef,\n            context,\n          }), resultName);\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context,\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = context.canonizeResults\n      ? this.canon.admit(finalResult)\n      // Since this.canon is normally responsible for freezing results (only in\n      // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context,\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n", "import { dep, OptimisticDependencyFunction } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\nconst cacheInfoMap = new WeakMap<ApolloCache<any>, {\n  vars: Set<ReactiveVar<any>>;\n  dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n}>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set,\n      dep: dep(),\n    });\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach(cache => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach(listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = cache => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n", "import { invariant } from \"../../utilities/globals\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities\";\n\nimport { hasOwn, isArray } from \"./helpers\";\nimport {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<string, {\n  paths?: string[][];\n  keyFieldsFn?: KeyFieldsFunction;\n  keyArgsFn?: KeyArgsFunction;\n}> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyFieldsFn || (info.keyFieldsFn = (\n    object,\n    context,\n  ) => {\n    const extract: typeof extractKey =\n      (from, key) => context.readField(key, from);\n\n    const keyObject = context.keyObject = collectSpecifierPaths(\n      specifier,\n      schemaKeyPath => {\n        let extracted = extractKeyPath(\n          context.storeObject,\n          schemaKeyPath,\n          // Using context.readField to extract paths from context.storeObject\n          // allows the extraction to see through Reference objects and respect\n          // custom read functions.\n          extract,\n        );\n\n        if (\n          extracted === void 0 &&\n          object !== context.storeObject &&\n          hasOwn.call(object, schemaKeyPath[0])\n        ) {\n          // If context.storeObject fails to provide a value for the requested\n          // path, fall back to the raw result object, if it has a top-level key\n          // matching the first key in the path (schemaKeyPath[0]). This allows\n          // key fields included in the written data to be saved in the cache\n          // even if they are not selected explicitly in context.selectionSet.\n          // Not being mentioned by context.selectionSet is convenient here,\n          // since it means these extra fields cannot be affected by field\n          // aliasing, which is why we can use extractKey instead of\n          // context.readField for this extraction.\n          extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n        }\n\n        invariant(\n          extracted !== void 0,\n          `Missing field '${schemaKeyPath.join('.')}' while extracting keyFields from ${\n            JSON.stringify(object)\n          }`,\n        );\n\n        return extracted;\n      },\n    );\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  });\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier: KeySpecifier): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyArgsFn || (info.keyArgsFn = (args, {\n    field,\n    variables,\n    fieldName,\n  }) => {\n    const collected = collectSpecifierPaths(specifier, keyPath => {\n      const firstKey = keyPath[0];\n      const firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          const directiveName = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          const d = field.directives.find(d => d.name.value === directiveName);\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          const directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(\n            directiveArgs,\n            // If keyPath.length === 1, this code calls extractKeyPath with an\n            // empty path, which works because it uses directiveArgs as the\n            // extracted value.\n            keyPath.slice(1),\n          );\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        const variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          const varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n\n    const suffix = JSON.stringify(collected);\n\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any,\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger;\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = info.paths = [];\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(p => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<\n  TObj extends Record<string, any>,\n  TKey extends string,\n>(object: TObj, key: TKey): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey,\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key): any {\n    return isArray(obj)\n      ? obj.map(child => reducer(child, key))\n      : obj && extract!(obj, key);\n  }, object));\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(\n      Object.keys(value).sort(),\n      path => extractKeyPath(value, path),\n    ) as T;\n  }\n  return value;\n}\n", "import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport {\n  FragmentMap,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  isNonNullObject,\n  stringifyForDisplay,\n} from '../../utilities';\nimport {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n  isArray,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { WriteContext } from './writeToStore';\n\n// Upgrade to a faster version of the default stable JSON.stringify function\n// used by getStoreKeyName. This function is used when computing storeFieldName\n// strings (when no keyArgs has been configured for a field).\nimport { canonicalStringify } from './object-canon';\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from './key-extractor';\n\ngetStoreKeyName.setStringify(canonicalStringify);\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\nexport type KeySpecifier = ReadonlyArray<string | KeySpecifier>;\n\nexport type KeyFieldsContext = {\n  // The __typename of the incoming object, even if the __typename field was\n  // aliased to another name in the raw result object. May be undefined when\n  // dataIdFromObject is called for objects without __typename fields.\n  typename: string | undefined;\n\n  // The object to be identified, after processing to remove aliases and\n  // normalize identifiable child objects with references.\n  storeObject: StoreObject;\n\n  // Handy tool for reading additional fields from context.storeObject, either\n  // readField(\"fieldName\") to read storeObject[fieldName], or readField(\"name\",\n  // objectOrReference) to read from another object or Reference. If you read a\n  // field with a read function, that function will be invoked.\n  readField: ReadFieldFunction;\n\n  // If you are writing a custom keyFields function, and you plan to use the raw\n  // result object passed as the first argument, you may also need access to the\n  // selection set and available fragments for this object, just in case any\n  // fields have aliases. Since this logic is tricky to get right, and these\n  // context properties are not even always provided (for example, they are\n  // omitted when calling cache.identify(object), where object is assumed to be\n  // a StoreObject), we recommend you use context.storeObject (which has already\n  // been de-aliased) and context.readField (which can read from references as\n  // well as objects) instead of the raw result object in your keyFields\n  // functions, or just rely on the internal implementation of keyFields:[...]\n  // syntax to get these details right for you.\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n\n  // Internal. May be set by the KeyFieldsFunction to report fields that were\n  // involved in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions,\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    partialContext?: Partial<KeyFieldsContext>,\n  ): [string?, StoreObject?] {\n    const policies = this;\n\n    const typename = partialContext && (\n      partialContext.typename ||\n      partialContext.storeObject?.__typename\n    ) || object.__typename;\n\n    // It should be possible to write root Query fields with writeFragment,\n    // using { __typename: \"Query\", ... } as the data, but it does not make\n    // sense to allow the same identification behavior for the Mutation and\n    // Subscription types, since application code should never be writing\n    // directly to (or reading directly from) those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    // Default context.storeObject to object if not otherwise provided.\n    const storeObject = partialContext && partialContext.storeObject || object;\n\n    const context: KeyFieldsContext = {\n      ...partialContext,\n      typename,\n      storeObject,\n      readField: partialContext && partialContext.readField || function () {\n        const options = normalizeReadFieldOptions(arguments, storeObject);\n        return policies.readField(options, {\n          store: policies.cache[\"data\"],\n          variables: options.variables,\n        });\n      },\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach(policy => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getReadFunction(\n    typename: string | undefined,\n    fieldName: string,\n  ): FieldReadFunction | undefined {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store,\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n    readField<T>() {\n      return policies.readField<T>(\n        normalizeReadFieldOptions(arguments, objectOrReference, variables),\n        context,\n      );\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nexport function normalizeReadFieldOptions(\n  readFieldArgs: IArguments,\n  objectOrReference: StoreObject | Reference | undefined,\n  variables?: ReadMergeModifyContext[\"variables\"],\n): ReadFieldOptions {\n  const {\n    0: fieldNameOrOptions,\n    1: from,\n    length: argc,\n  } = readFieldArgs;\n\n  let options: ReadFieldOptions;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      // Default to objectOrReference only when no second argument was\n      // passed for the from parameter, not when undefined is explicitly\n      // passed as the second argument.\n      from: argc > 1 ? from : objectOrReference,\n    };\n  } else {\n    options = { ...fieldNameOrOptions };\n    // Default to objectOrReference only when fieldNameOrOptions.from is\n    // actually omitted, rather than just undefined.\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    invariant.warn(`Undefined 'from' passed to readField with arguments ${\n      stringifyForDisplay(Array.from(readFieldArgs))\n    }`);\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) &&\n        isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n", "import { invariant, InvariantError } from '../../utilities/globals';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport {\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport {\n  createFragmentMap,\n  FragmentMap,\n  getFragmentFromSelection,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  Reference,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n  isNonEmptyArray,\n  argumentsObjectFromField,\n} from '../../utilities';\n\nimport { NormalizedCache, ReadMergeModifyContext, MergeTree } from './types';\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, isArray } from './helpers';\nimport { StoreReader } from './readFromStore';\nimport { InMemoryCache } from './inMemoryCache';\nimport { EntityStore } from './entityStore';\nimport { Cache } from '../../core';\nimport { canonicalStringify } from './object-canon';\nimport { normalizeReadFieldOptions } from './policies';\nimport { ReadFieldFunction } from '../core/types/common';\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap?: FragmentMap;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<string, {\n    storeObject: StoreObject;\n    mergeTree?: MergeTree;\n    fieldNodeSet: Set<FieldNode>;\n  }>;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n};\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  | \"clientOnly\"\n  | \"deferred\"\n  | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"],\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(key, flavored = (\n      context.clientOnly === clientOnly &&\n      context.deferred === deferred\n    ) ? context : {\n      ...context,\n      clientOnly,\n      deferred,\n    });\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string,\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n  ) {}\n\n  public writeToStore(store: NormalizedCache, {\n    query,\n    result,\n    dataId,\n    variables,\n    overwrite,\n  }: Cache.WriteOptions): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map,\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map,\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw new InvariantError(`Could not identify object ${JSON.stringify(result)}`);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n      const entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        const applied = this.applyMerges(mergeTree, entityRef, storeObject, context);\n        if (isReference(applied)) {\n          // Assume References returned by applyMerges have already been merged\n          // into the store. See makeMergeObjectsFunction in policies.ts for an\n          // example of how this can happen.\n          return;\n        }\n        // Otherwise, applyMerges returned a StoreObject, whose fields we should\n        // merge into the store (see store.merge statement below).\n        storeObject = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        const fieldsWithSelectionSets: Record<string, true> = Object.create(null);\n        fieldNodeSet.forEach(field => {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets[field.name.value] = true;\n          }\n        });\n\n        const hasSelectionSet = (storeFieldName: string) =>\n          fieldsWithSelectionSets[\n            fieldNameFromStoreName(storeFieldName)\n          ] === true;\n\n        const hasMergeFunction = (storeFieldName: string) => {\n          const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(storeObject).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(\n              entityRef,\n              storeObject,\n              storeFieldName,\n              context.store,\n            );\n          }\n        });\n      }\n\n      store.merge(dataId, storeObject);\n    });\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = Object.create(null);\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && context.store.get(dataId, \"__typename\") as string);\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = function (this: void) {\n      const options = normalizeReadFieldOptions(\n        arguments,\n        incoming,\n        context.variables,\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField({\n            ...options,\n            from: info.storeObject\n          }, context);\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename,\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet\n            ? getContextFlavor(context, false, false)\n            : context,\n          childTree,\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (field.selectionSet &&\n            (isReference(incomingValue) ||\n             storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename,\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(`Missing field '${\n          resultKeyNameFromField(field)\n        }' while writing result ${\n          JSON.stringify(result, null, 2)\n        }`.substring(0, 1000));\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(\n        result,\n        dataRef,\n        selectionSet,\n        context,\n      )) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach(field => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree,\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<TContext extends Pick<\n    WriteContext,\n    | \"clientOnly\"\n    | \"deferred\"\n    | \"flavors\"\n    | \"fragmentMap\"\n    | \"variables\"\n  >>(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap),\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext,\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred,\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach(selection => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach(dir => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred),\n          );\n\n        } else {\n          const fragment =\n            getFragmentFromSelection(selection, context.fragmentMap);\n\n          if (fragment &&\n              policies.fragmentMatches(\n                fragment, typename, result, context.variables)) {\n\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred),\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>,\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined = (\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n      ) ? existing : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number,\n      ): StoreValue => {\n        return isArray(from)\n          ? (typeof name === \"number\" ? from[name] : void 0)\n          : context.store.getFieldValue(from, String(name))\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs,\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map;\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs),\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined,\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info = left.info && right.info ? {\n    ...left.info,\n    ...right.info,\n  } : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps ? new Map :\n    left.map.size ? left.map : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(leftTree, right.map.get(key)),\n      );\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach(key => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(\n          right.map.get(key),\n          left.map.get(key),\n        ),\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache,\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(\n    key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) &&\n      !isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" &&\n          !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n`Cache data may be lost when replacing the ${fieldName} field of a ${parentType} object.\n\nTo address this problem (which is not a bug in Apollo Client), ${\n  childTypenames.length\n    ? \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n    : \"\"\n}define a custom merge function for the ${\n  typeDotName\n} field, so InMemoryCache can safely merge these objects:\n\n  existing: ${JSON.stringify(existing).slice(0, 1000)}\n  incoming: ${JSON.stringify(incoming).slice(0, 1000)}\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`);\n}\n", "import { invariant } from '../../utilities/globals';\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\nimport { OptimisticWrapperFunction, wrap } from 'optimism';\nimport { equal } from '@wry/equality';\n\nimport { ApolloCache } from '../core/cache';\nimport { Cache } from '../core/types/Cache';\nimport { MissingFieldError } from '../core/types/common';\nimport {\n  addTypenameToDocument,\n  StoreObject,\n  Reference,\n  isReference,\n} from '../../utilities';\nimport { InMemoryCacheConfig, NormalizedCacheObject } from './types';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { makeVar, forgetCache, recallCache } from './reactiveVars';\nimport { Policies } from './policies';\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from './helpers';\nimport { canonicalStringify } from './object-canon';\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  | \"optimistic\"\n  | \"onWatchUpdated\"\n>\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n\n  private maybeBroadcastWatch: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]>;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    });\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon: resetResultIdentities\n          ? void 0\n          : previousReader && previousReader.canon,\n      }),\n    );\n\n    this.maybeBroadcastWatch = wrap((\n      c: Cache.WatchOptions,\n      options?: BroadcastOptions,\n    ) => {\n      return this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: (c: Cache.WatchOptions) => {\n        // Return a cache key (thus enabling result caching) only if we're\n        // currently using a data store that can track cache dependencies.\n        const store = c.optimistic ? this.optimisticData : this.data;\n        if (supportsResultCaching(store)) {\n          const { optimistic, rootId, variables } = c;\n          return store.makeCacheKey(\n            c.query,\n            // Different watches can have the same query, optimistic\n            // status, rootId, and variables, but if their callbacks are\n            // different, the (identical) result needs to be delivered to\n            // each distinct callback. The easiest way to achieve that\n            // separation is to include c.callback in the cache key for\n            // maybeBroadcastWatch calls. See issue #5733.\n            c.callback,\n            canonicalStringify({ optimistic, rootId, variables }),\n          );\n        }\n      }\n    });\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([\n      this.data.group,\n      this.optimisticData.group,\n    ]).forEach(group => group.resetCaching());\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return this.storeReader.diffQueryAgainstStore<T>({\n        ...options,\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData,\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not\n        // need to worry about catching \"normal\" exceptions resulting from\n        // incomplete cache data. Unexpected errors will be re-thrown. If\n        // you need more information about which fields were missing, use\n        // cache.diff instead, and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>,\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach(watch => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>,\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === 'string') {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(watch => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null,\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || (optimisticId !== null),\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(\n    c: Cache.WatchOptions,\n    options?: BroadcastOptions,\n  ) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic &&\n          typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated &&\n          options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  }\n}\n", "import '../utilities/globals';\n\nimport { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    const errors = ((err.graphQLErrors || []) as readonly Error[])\n      .concat(err.clientErrors || []);\n    errors.forEach((error: Error) => {\n      const errorMessage = error\n        ? error.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    clientErrors?: ReadonlyArray<Error>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n", "/**\n * The current status of a query\u2019s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus,\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n", "import { invariant } from '../utilities/globals';\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    // This transform is heavily cached, so it should not be expensive to\n    // transform the same this.options.query document repeatedly.\n    return this.queryManager.transform(this.options.query).document;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn\u2019t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    return !this.last || !equal(this.last.result, newResult);\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult as ApolloQueryResult<TFetchData>;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            fetchPolicy: \"network-only\",\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const concast = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object, in part so\n      // that we can remove it here without triggering any unsubscriptions,\n      // because we just want to ignore the old observable, not prematurely shut\n      // it down, since other consumers may be awaiting this.concast.promise.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast.promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n", "import { invariant } from '../utilities/globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n", "import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery, reobserveCacheFirst } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        const diff = this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          oq[\"observe\"]();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: this.document!,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n", "import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesArray,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\ntype DefaultOptions = import(\"./ApolloClient\").DefaultOptions;\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = defaults && defaults.fetchPolicy || \"cache-first\",\n      errorPolicy = defaults && defaults.errorPolicy || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const concastSources = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        concastSources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return concastSources;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, reason => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesArray<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () => this.getResultsFromLink<TData, TVars>(\n      queryInfo,\n      cacheWriteBehavior,\n      {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      },\n    );\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n", "import { invariant, InvariantError } from '../utilities/globals';\n\nimport { ExecutionResult, DocumentNode } from 'graphql';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy } from '../cache';\nimport { Observable } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities\";\nexport { mergeOptions }\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions;\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables = OperationVariables,\n    TContext = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>\n  >(\n    options: MutationOptions<TData, TVariables, TContext>,\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You\u2019ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: false,\n      }))\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: true,\n      }))\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>,\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch(error => {\n      invariant.debug(`In client.refetchQueries, Promise.all promise rejected with error ${error}`);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings. An \"active\" query is one that has observers and a\n   * `fetchPolicy` other than \"standby\" or \"cache-only\". You can include all\n   * `ObservableQuery` objects (including the inactive ones) by passing \"all\"\n   * instead of \"active\", or you can include just a subset of active queries by\n   * passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\",\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n", "/* Core */\n\nimport { DEV } from '../utilities/globals';\n\nexport {\n  ApolloClient,\n  ApolloClientOptions,\n  DefaultOptions,\n  mergeOptions,\n} from './ApolloClient';\nexport {\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n} from './ObservableQuery';\nexport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  FetchPolicy,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n} from './watchQueryOptions';\nexport { NetworkStatus } from './networkStatus';\nexport * from './types';\nexport {\n  Resolver,\n  FragmentMatcher,\n} from './LocalState';\nexport { isApolloError, ApolloError } from '../errors';\n\n/* Cache */\n\nexport {\n  // All the exports (types and values) from ../cache, minus cacheSlot,\n  // which we want to keep semi-private.\n  Cache,\n  ApolloCache,\n  Transaction,\n  DataProxy,\n  InMemoryCache,\n  InMemoryCacheConfig,\n  MissingFieldError,\n  defaultDataIdFromObject,\n  ReactiveVar,\n  makeVar,\n  TypePolicies,\n  TypePolicy,\n  FieldPolicy,\n  FieldReadFunction,\n  FieldMergeFunction,\n  FieldFunctionOptions,\n  PossibleTypesMap,\n} from '../cache';\n\nexport * from '../cache/inmemory/types';\n\n/* Link */\n\nexport * from '../link/core';\nexport * from '../link/http';\nexport {\n  fromError,\n  toPromise,\n  fromPromise,\n  ServerError,\n  throwServerError,\n} from '../link/utils';\n\n/* Utilities */\n\nexport {\n  Observable,\n  Observer,\n  ObservableSubscription,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n} from '../utilities';\n\n/* Supporting */\n\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity }\nsetVerbosity(DEV ? \"log\" : \"silent\");\n\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n} from 'graphql-tag';\n"],
  "mappings": "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",
  "names": ["InvariantError", "invariant", "_a", "_a", "_a", "root", "result", "_a", "result", "_a", "DeepMerger", "result", "Subscription", "SubscriptionObserver", "Observable", "forEach", "concat", "value", "from", "root", "result", "Symbol", "result", "error", "Concast", "result", "result", "result", "value", "result", "_a", "LinkError", "ApolloLink", "hasOwnProperty", "result", "_a", "print", "version", "_b", "_c", "parseError", "result", "HttpLink", "_a", "toString", "hasOwnProperty", "_a", "Trie", "Slot", "_a", "Cache", "hasOwnProperty", "_a", "Entry", "dep", "cache", "ApolloCache", "_a", "Cache", "MissingFieldError", "_a", "result", "EntityStore", "from", "_a", "root", "CacheGroup", "EntityStore", "Root", "_a", "Layer", "Stump", "root", "ObjectCanon", "StoreReader", "_a", "result", "result", "caches", "cache", "from", "_a", "d", "_a", "Policies", "existing", "incoming", "result", "supertypeSet", "_a", "from", "StoreWriter", "_a", "result", "dataId", "context", "value", "selectionSet", "from", "_a", "InMemoryCache", "_a", "result", "ApolloError", "_a", "NetworkStatus", "hasOwnProperty", "ObservableQuery", "_a", "result", "info", "_a", "LocalState", "_a", "result", "execute", "QueryInfo", "_a", "result", "result", "hasOwnProperty", "QueryManager", "_a", "defaultOptions", "self", "result", "cache", "DELETE", "variables", "diff", "networkStatus", "data", "ApolloClient", "_a", "defaultOptions", "result"]
}
